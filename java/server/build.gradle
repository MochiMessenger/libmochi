plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

sourceCompatibility = 17
archivesBaseName = "libmochi-server"

repositories {
    mavenCentral()
    mavenLocal()
}

sourceSets {
    main {
        java {
            // Include libmochi sources shared between the client and server
            srcDir '../shared/java'
        }
        resources {
            srcDir '../shared/resources'
        }
    }
    test {
        java {
            srcDir '../shared/test/java'
        }
    }
}

dependencies {
    testImplementation 'junit:junit:4.13'
}

test {
    jvmArgs '-Xcheck:jni'
    testLogging {
        events 'passed','skipped','failed'
        showStandardStreams = true
        showExceptions true
        exceptionFormat 'full'
        showCauses true
        showStackTraces true
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

processResources {
    // TODO: Build a different variant of the JNI library for server.
    dependsOn ':makeJniLibrariesDesktop'
}

// MARK: Publishing

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            from components.java

            pom {
                name = archivesBaseName
                description = 'Mochi Protocol cryptography library for Java (server-side)'
                url = 'https://github.com/mochimessenger/libmochi'

                scm {
                    url = 'scm:git@github.com:mochimessenger/libmochi.git'
                    connection = 'scm:git@github.com:mochimessenger/libmochi.git'
                    developerConnection = 'scm:git@github.com:mochimessenger/libmochi.git'
                }

                licenses {
                    license {
                        name = 'AGPLv3'
                        url = 'https://www.gnu.org/licenses/agpl-3.0.txt'
                    }
                }

                developers {
                    developer {
                        name = 'Mochi Messenger LLC'
                    }
                }
            }
        }
    }
}

setUpSigningKey(signing)
signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask(":server:publish") }
    sign publishing.publications.mavenJava
}
