/*
Copyright (C) 2020-2021 Mochi Messenger, LLC.
SPDX-License-Identifier: AGPL-3.0-only
*/


#ifndef MOCHI_FFI_H_
#define MOCHI_FFI_H_

/* This file was automatically generated by cbindgen */

#include <stdarg.h>
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>

/**
 * The encoded length of a [`FourCC`], in bytes.
 */
#define MochiFourCC_ENCODED_LEN 4

#define MochiBoxHeader_MAX_SIZE 32

#define MochiNUM_AUTH_CRED_ATTRIBUTES 3

#define MochiNUM_PROFILE_KEY_CRED_ATTRIBUTES 4

#define MochiNUM_RECEIPT_CRED_ATTRIBUTES 2

#define MochiPRESENTATION_VERSION_1 0

#define MochiPRESENTATION_VERSION_2 1

#define MochiPRESENTATION_VERSION_3 2

#define MochiPRESENTATION_VERSION_4 3

#define MochiAES_KEY_LEN 32

#define MochiAESGCM_NONCE_LEN 12

#define MochiAESGCM_TAG_LEN 16

#define MochiGROUP_MASTER_KEY_LEN 32

#define MochiGROUP_SECRET_PARAMS_LEN 289

#define MochiGROUP_PUBLIC_PARAMS_LEN 97

#define MochiGROUP_IDENTIFIER_LEN 32

#define MochiAUTH_CREDENTIAL_LEN 181

#define MochiAUTH_CREDENTIAL_PRESENTATION_V2_LEN 461

#define MochiAUTH_CREDENTIAL_RESPONSE_LEN 361

#define MochiAUTH_CREDENTIAL_WITH_PNI_LEN 265

#define MochiAUTH_CREDENTIAL_WITH_PNI_RESPONSE_LEN 425

#define MochiPROFILE_KEY_LEN 32

#define MochiPROFILE_KEY_CIPHERTEXT_LEN 65

#define MochiPROFILE_KEY_COMMITMENT_LEN 97

#define MochiEXPIRING_PROFILE_KEY_CREDENTIAL_LEN 153

#define MochiPROFILE_KEY_CREDENTIAL_PRESENTATION_V2_LEN 713

#define MochiPROFILE_KEY_CREDENTIAL_REQUEST_LEN 329

#define MochiPROFILE_KEY_CREDENTIAL_REQUEST_CONTEXT_LEN 473

#define MochiEXPIRING_PROFILE_KEY_CREDENTIAL_RESPONSE_LEN 497

#define MochiPROFILE_KEY_VERSION_LEN 32

#define MochiPROFILE_KEY_VERSION_ENCODED_LEN 64

#define MochiRECEIPT_CREDENTIAL_LEN 129

#define MochiRECEIPT_CREDENTIAL_PRESENTATION_LEN 329

#define MochiRECEIPT_CREDENTIAL_REQUEST_LEN 97

#define MochiRECEIPT_CREDENTIAL_REQUEST_CONTEXT_LEN 177

#define MochiRECEIPT_CREDENTIAL_RESPONSE_LEN 409

#define MochiRECEIPT_SERIAL_LEN 16

#define MochiRESERVED_LEN 1

#define MochiSERVER_SECRET_PARAMS_LEN 2721

#define MochiSERVER_PUBLIC_PARAMS_LEN 673

#define MochiUUID_CIPHERTEXT_LEN 65

#define MochiRANDOMNESS_LEN 32

#define MochiSIGNATURE_LEN 64

#define MochiUUID_LEN 16

#define MochiACCESS_KEY_LEN 16

/**
 * Seconds in a 24-hour cycle (ignoring leap seconds).
 */
#define MochiSECONDS_PER_DAY 86400

typedef enum {
  MochiCiphertextMessageTypeWhisper = 2,
  MochiCiphertextMessageTypePreKey = 3,
  MochiCiphertextMessageTypeSenderKey = 7,
  MochiCiphertextMessageTypePlaintext = 8,
} MochiCiphertextMessageType;

typedef enum {
  MochiContentHintDefault = 0,
  MochiContentHintResendable = 1,
  MochiContentHintImplicit = 2,
} MochiContentHint;

typedef enum {
  MochiDirectionSending = 0,
  MochiDirectionReceiving = 1,
} MochiDirection;

typedef enum {
  MochiLogLevelError = 1,
  MochiLogLevelWarn,
  MochiLogLevelInfo,
  MochiLogLevelDebug,
  MochiLogLevelTrace,
} MochiLogLevel;

typedef enum {
  MochiErrorCodeUnknownError = 1,
  MochiErrorCodeInvalidState = 2,
  MochiErrorCodeInternalError = 3,
  MochiErrorCodeNullParameter = 4,
  MochiErrorCodeInvalidArgument = 5,
  MochiErrorCodeInvalidType = 6,
  MochiErrorCodeInvalidUtf8String = 7,
  MochiErrorCodeCancelled = 8,
  MochiErrorCodeProtobufError = 10,
  MochiErrorCodeLegacyCiphertextVersion = 21,
  MochiErrorCodeUnknownCiphertextVersion = 22,
  MochiErrorCodeUnrecognizedMessageVersion = 23,
  MochiErrorCodeInvalidMessage = 30,
  MochiErrorCodeSealedSenderSelfSend = 31,
  MochiErrorCodeInvalidKey = 40,
  MochiErrorCodeInvalidSignature = 41,
  MochiErrorCodeInvalidAttestationData = 42,
  MochiErrorCodeFingerprintVersionMismatch = 51,
  MochiErrorCodeFingerprintParsingError = 52,
  MochiErrorCodeUntrustedIdentity = 60,
  MochiErrorCodeInvalidKeyIdentifier = 70,
  MochiErrorCodeSessionNotFound = 80,
  MochiErrorCodeInvalidRegistrationId = 81,
  MochiErrorCodeInvalidSession = 82,
  MochiErrorCodeInvalidSenderKeySession = 83,
  MochiErrorCodeDuplicatedMessage = 90,
  MochiErrorCodeCallbackError = 100,
  MochiErrorCodeVerificationFailure = 110,
  MochiErrorCodeUsernameCannotBeEmpty = 120,
  MochiErrorCodeUsernameCannotStartWithDigit = 121,
  MochiErrorCodeUsernameMissingSeparator = 122,
  MochiErrorCodeUsernameBadDiscriminatorCharacter = 123,
  MochiErrorCodeUsernameBadNicknameCharacter = 124,
  MochiErrorCodeUsernameTooShort = 125,
  MochiErrorCodeUsernameTooLong = 126,
  MochiErrorCodeUsernameLinkInvalidEntropyDataLength = 127,
  MochiErrorCodeUsernameLinkInvalid = 128,
  MochiErrorCodeUsernameDiscriminatorCannotBeEmpty = 140,
  MochiErrorCodeUsernameDiscriminatorCannotBeZero = 141,
  MochiErrorCodeUsernameDiscriminatorCannotBeSingleDigit = 142,
  MochiErrorCodeUsernameDiscriminatorCannotHaveLeadingZeros = 143,
  MochiErrorCodeUsernameDiscriminatorTooLarge = 144,
  MochiErrorCodeIoError = 130,
  MochiErrorCodeInvalidMediaInput = 131,
  MochiErrorCodeUnsupportedMediaInput = 132,
  MochiErrorCodeConnectionTimedOut = 133,
  MochiErrorCodeNetworkProtocol = 134,
  MochiErrorCodeRateLimited = 135,
  MochiErrorCodeWebSocket = 136,
  MochiErrorCodeCdsiInvalidToken = 137,
  MochiErrorCodeConnectionFailed = 138,
  MochiErrorCodeChatServiceInactive = 139,
  MochiErrorCodeSvrDataMissing = 150,
  MochiErrorCodeSvrRestoreFailed = 151,
  MochiErrorCodeAppExpired = 160,
  MochiErrorCodeDeviceDeregistered = 161,
} MochiErrorCode;

/**
 * A wrapper around [`ctr::Ctr32BE`] that uses a smaller nonce and supports an initial counter.
 */
typedef struct MochiAes256Ctr32 MochiAes256Ctr32;

typedef struct MochiAes256GcmDecryption MochiAes256GcmDecryption;

typedef struct MochiAes256GcmEncryption MochiAes256GcmEncryption;

typedef struct MochiAes256GcmSiv MochiAes256GcmSiv;

typedef struct MochiCdsiLookup MochiCdsiLookup;

typedef struct MochiChat MochiChat;

typedef struct MochiCiphertextMessage MochiCiphertextMessage;

typedef struct MochiConnectionManager MochiConnectionManager;

typedef struct MochiDecryptionErrorMessage MochiDecryptionErrorMessage;

typedef struct MochiFingerprint MochiFingerprint;

typedef struct MochiHsmEnclaveClient MochiHsmEnclaveClient;

typedef struct MochiHttpRequest MochiHttpRequest;

typedef struct MochiIncrementalMac MochiIncrementalMac;

typedef struct MochiKeyPair MochiKeyPair;

typedef struct MochiKeySecret MochiKeySecret;

typedef struct MochiKyberPreKeyRecord MochiKyberPreKeyRecord;

typedef struct MochiLookupRequest MochiLookupRequest;

typedef struct MochiMessageBackupKey MochiMessageBackupKey;

typedef struct MochiMessageBackupValidationOutcome MochiMessageBackupValidationOutcome;

typedef struct MochiNonSuspendingBackgroundThreadRuntime MochiNonSuspendingBackgroundThreadRuntime;

typedef struct MochiOtherTestingHandleType MochiOtherTestingHandleType;

typedef struct MochiPinHash MochiPinHash;

typedef struct MochiPlaintextContent MochiPlaintextContent;

typedef struct MochiPreKeyBundle MochiPreKeyBundle;

typedef struct MochiPreKeyRecord MochiPreKeyRecord;

typedef struct MochiPreKeyMochiMessage MochiPreKeyMochiMessage;

typedef struct MochiPrivateKey MochiPrivateKey;

/**
 * Represents a unique Mochi client instance as `(<user ID>, <device ID>)` pair.
 */
typedef struct MochiProtocolAddress MochiProtocolAddress;

typedef struct MochiPublicKey MochiPublicKey;

/**
 * Sanitized metadata returned by the sanitizer.
 */
typedef struct MochiSanitizedMetadata MochiSanitizedMetadata;

typedef struct MochiSenderCertificate MochiSenderCertificate;

typedef struct MochiSenderKeyDistributionMessage MochiSenderKeyDistributionMessage;

typedef struct MochiSenderKeyMessage MochiSenderKeyMessage;

typedef struct MochiSenderKeyRecord MochiSenderKeyRecord;

typedef struct MochiServerCertificate MochiServerCertificate;

/**
 * Wraps a named type and a single-use guard around [`chat::server_requests::AckEnvelopeFuture`].
 */
typedef struct MochiServerMessageAck MochiServerMessageAck;

typedef struct MochiServerPublicParams MochiServerPublicParams;

typedef struct MochiServerSecretParams MochiServerSecretParams;

typedef struct MochiSessionRecord MochiSessionRecord;

typedef struct MochiSgxClientState MochiSgxClientState;

/**
 * The top-level error type (opaquely) returned to C clients when something goes wrong.
 *
 * Ideally this would use [ThinBox][], and then we wouldn't need an extra level of indirection when
 * returning it to C, but unfortunately that isn't stable yet.
 *
 * [ThinBox]: https://doc.rust-lang.org/std/boxed/struct.ThinBox.html
 */
typedef struct MochiFfiError MochiFfiError;

typedef struct MochiMessage MochiMessage;

typedef struct MochiSignedPreKeyRecord MochiSignedPreKeyRecord;

typedef struct MochiTestingHandleType MochiTestingHandleType;

typedef struct MochiTokioAsyncContext MochiTokioAsyncContext;

typedef struct MochiUnidentifiedSenderMessageContent MochiUnidentifiedSenderMessageContent;

typedef struct MochiValidatingMac MochiValidatingMac;

/**
 * A type alias to be used with [`OwnedBufferOf`], so that `OwnedBufferOf<c_char>` and
 * `OwnedBufferOf<*const c_char>` get distinct names.
 */
typedef const char *MochiCStringPtr;

/**
 * A representation of a array allocated on the Rust heap for use in C code.
 */
typedef struct {
  MochiCStringPtr *base;
  /**
   * The number of elements in the buffer (not necessarily the number of bytes).
   */
  size_t length;
} MochiOwnedBufferOfCStringPtr;

typedef struct {
  /**
   * Telephone number, as an unformatted e164.
   */
  uint64_t e164;
  uint8_t rawAciUuid[16];
  uint8_t rawPniUuid[16];
} MochiFfiCdsiLookupResponseEntry;

/**
 * A representation of a array allocated on the Rust heap for use in C code.
 */
typedef struct {
  MochiFfiCdsiLookupResponseEntry *base;
  /**
   * The number of elements in the buffer (not necessarily the number of bytes).
   */
  size_t length;
} MochiOwnedBufferOfFfiCdsiLookupResponseEntry;

/**
 * A representation of a array allocated on the Rust heap for use in C code.
 */
typedef struct {
  unsigned char *base;
  /**
   * The number of elements in the buffer (not necessarily the number of bytes).
   */
  size_t length;
} MochiOwnedBuffer;

/**
 * A representation of a array allocated on the Rust heap for use in C code.
 */
typedef struct {
  size_t *base;
  /**
   * The number of elements in the buffer (not necessarily the number of bytes).
   */
  size_t length;
} MochiOwnedBufferOfusize;

typedef struct {
  MochiOwnedBuffer bytes;
  MochiOwnedBufferOfusize lengths;
} MochiBytestringArray;

typedef struct {
  const unsigned char *base;
  size_t length;
} MochiBorrowedBuffer;

typedef int (*MochiLoadSession)(void *store_ctx, MochiSessionRecord **recordp, const MochiProtocolAddress *address);

typedef int (*MochiStoreSession)(void *store_ctx, const MochiProtocolAddress *address, const MochiSessionRecord *record);

typedef struct {
  void *ctx;
  MochiLoadSession load_session;
  MochiStoreSession store_session;
} MochiSessionStore;

typedef int (*MochiGetIdentityKeyPair)(void *store_ctx, MochiPrivateKey **keyp);

typedef int (*MochiGetLocalRegistrationId)(void *store_ctx, uint32_t *idp);

typedef int (*MochiSaveIdentityKey)(void *store_ctx, const MochiProtocolAddress *address, const MochiPublicKey *public_key);

typedef int (*MochiGetIdentityKey)(void *store_ctx, MochiPublicKey **public_keyp, const MochiProtocolAddress *address);

typedef int (*MochiIsTrustedIdentity)(void *store_ctx, const MochiProtocolAddress *address, const MochiPublicKey *public_key, unsigned int direction);

typedef struct {
  void *ctx;
  MochiGetIdentityKeyPair get_identity_key_pair;
  MochiGetLocalRegistrationId get_local_registration_id;
  MochiSaveIdentityKey save_identity;
  MochiGetIdentityKey get_identity;
  MochiIsTrustedIdentity is_trusted_identity;
} MochiIdentityKeyStore;

typedef int (*MochiLoadPreKey)(void *store_ctx, MochiPreKeyRecord **recordp, uint32_t id);

typedef int (*MochiStorePreKey)(void *store_ctx, uint32_t id, const MochiPreKeyRecord *record);

typedef int (*MochiRemovePreKey)(void *store_ctx, uint32_t id);

typedef struct {
  void *ctx;
  MochiLoadPreKey load_pre_key;
  MochiStorePreKey store_pre_key;
  MochiRemovePreKey remove_pre_key;
} MochiPreKeyStore;

typedef int (*MochiLoadSignedPreKey)(void *store_ctx, MochiSignedPreKeyRecord **recordp, uint32_t id);

typedef int (*MochiStoreSignedPreKey)(void *store_ctx, uint32_t id, const MochiSignedPreKeyRecord *record);

typedef struct {
  void *ctx;
  MochiLoadSignedPreKey load_signed_pre_key;
  MochiStoreSignedPreKey store_signed_pre_key;
} MochiSignedPreKeyStore;

typedef void (*MochiLogCallback)(void *ctx, const char *target, MochiLogLevel level, const char *file, uint32_t line, const char *message);

typedef void (*MochiLogFlushCallback)(void *ctx);

typedef struct {
  void *ctx;
  MochiLogCallback log;
  MochiLogFlushCallback flush;
} MochiFfiLogger;

typedef struct {
  unsigned char *base;
  size_t length;
} MochiBorrowedMutableBuffer;

typedef MochiKeyPair MochiKyberKeyPair;

typedef MochiPublicKey MochiKyberPublicKey;

/**
 * A KEM secret key with the ability to decapsulate a shared secret.
 */
typedef MochiKeySecret MochiSecretKey;

typedef MochiSecretKey MochiKyberSecretKey;

/**
 * The fixed-width binary representation of a ServiceId.
 *
 * Rarely used. The variable-width format that privileges ACIs is preferred.
 */
typedef uint8_t MochiServiceIdFixedWidthBinaryBytes[17];

typedef int (*MochiLoadKyberPreKey)(void *store_ctx, MochiKyberPreKeyRecord **recordp, uint32_t id);

typedef int (*MochiStoreKyberPreKey)(void *store_ctx, uint32_t id, const MochiKyberPreKeyRecord *record);

typedef int (*MochiMarkKyberPreKeyUsed)(void *store_ctx, uint32_t id);

typedef struct {
  void *ctx;
  MochiLoadKyberPreKey load_kyber_pre_key;
  MochiStoreKyberPreKey store_kyber_pre_key;
  MochiMarkKyberPreKeyUsed mark_kyber_pre_key_used;
} MochiKyberPreKeyStore;

typedef struct {
  const MochiProtocolAddress *const *base;
  size_t length;
} MochiBorrowedSliceOfProtocolAddress;

typedef struct {
  const MochiSessionRecord *const *base;
  size_t length;
} MochiBorrowedSliceOfSessionRecord;

typedef int (*MochiLoadSenderKey)(void *store_ctx, MochiSenderKeyRecord**, const MochiProtocolAddress*, const uint8_t (*distribution_id)[16]);

typedef int (*MochiStoreSenderKey)(void *store_ctx, const MochiProtocolAddress*, const uint8_t (*distribution_id)[16], const MochiSenderKeyRecord*);

typedef struct {
  void *ctx;
  MochiLoadSenderKey load_sender_key;
  MochiStoreSenderKey store_sender_key;
} MochiSenderKeyStore;

typedef struct {
  const MochiBorrowedBuffer *base;
  size_t length;
} MochiBorrowedSliceOfBuffers;

typedef uint64_t MochiCancellationId;

/**
 * A C callback used to report the results of Rust futures.
 *
 * cbindgen will produce independent C types like `MochiCPromisei32` and
 * `MochiCPromiseProtocolAddress`.
 *
 * This derives Copy because it behaves like a C type; nevertheless, a promise should still only be
 * completed once.
 */
typedef struct {
  void (*complete)(MochiFfiError *error, const MochiOwnedBuffer *result, const void *context);
  const void *context;
  MochiCancellationId cancellation_id;
} MochiCPromiseOwnedBufferOfc_uchar;

/**
 * A C callback used to report the results of Rust futures.
 *
 * cbindgen will produce independent C types like `MochiCPromisei32` and
 * `MochiCPromiseProtocolAddress`.
 *
 * This derives Copy because it behaves like a C type; nevertheless, a promise should still only be
 * completed once.
 */
typedef struct {
  void (*complete)(MochiFfiError *error, const bool *result, const void *context);
  const void *context;
  MochiCancellationId cancellation_id;
} MochiCPromisebool;

/**
 * A C callback used to report the results of Rust futures.
 *
 * cbindgen will produce independent C types like `MochiCPromisei32` and
 * `MochiCPromiseProtocolAddress`.
 *
 * This derives Copy because it behaves like a C type; nevertheless, a promise should still only be
 * completed once.
 */
typedef struct {
  void (*complete)(MochiFfiError *error, MochiCdsiLookup *const *result, const void *context);
  const void *context;
  MochiCancellationId cancellation_id;
} MochiCPromiseCdsiLookup;

typedef struct {
  MochiOwnedBufferOfFfiCdsiLookupResponseEntry entries;
  int32_t debug_permits_used;
} MochiFfiCdsiLookupResponse;

/**
 * A C callback used to report the results of Rust futures.
 *
 * cbindgen will produce independent C types like `MochiCPromisei32` and
 * `MochiCPromiseProtocolAddress`.
 *
 * This derives Copy because it behaves like a C type; nevertheless, a promise should still only be
 * completed once.
 */
typedef struct {
  void (*complete)(MochiFfiError *error, const MochiFfiCdsiLookupResponse *result, const void *context);
  const void *context;
  MochiCancellationId cancellation_id;
} MochiCPromiseFfiCdsiLookupResponse;

typedef struct {
  uint32_t reconnect_count;
  uint8_t raw_ip_type;
  double duration_secs;
  const char *connection_info;
} MochiFfiChatServiceDebugInfo;

/**
 * A C callback used to report the results of Rust futures.
 *
 * cbindgen will produce independent C types like `MochiCPromisei32` and
 * `MochiCPromiseProtocolAddress`.
 *
 * This derives Copy because it behaves like a C type; nevertheless, a promise should still only be
 * completed once.
 */
typedef struct {
  void (*complete)(MochiFfiError *error, const MochiFfiChatServiceDebugInfo *result, const void *context);
  const void *context;
  MochiCancellationId cancellation_id;
} MochiCPromiseFfiChatServiceDebugInfo;

typedef struct {
  uint16_t status;
  const char *message;
  MochiOwnedBufferOfCStringPtr headers;
  MochiOwnedBuffer body;
} MochiFfiChatResponse;

/**
 * A C callback used to report the results of Rust futures.
 *
 * cbindgen will produce independent C types like `MochiCPromisei32` and
 * `MochiCPromiseProtocolAddress`.
 *
 * This derives Copy because it behaves like a C type; nevertheless, a promise should still only be
 * completed once.
 */
typedef struct {
  void (*complete)(MochiFfiError *error, const MochiFfiChatResponse *result, const void *context);
  const void *context;
  MochiCancellationId cancellation_id;
} MochiCPromiseFfiChatResponse;

typedef struct {
  MochiFfiChatResponse response;
  MochiFfiChatServiceDebugInfo debug_info;
} MochiFfiResponseAndDebugInfo;

/**
 * A C callback used to report the results of Rust futures.
 *
 * cbindgen will produce independent C types like `MochiCPromisei32` and
 * `MochiCPromiseProtocolAddress`.
 *
 * This derives Copy because it behaves like a C type; nevertheless, a promise should still only be
 * completed once.
 */
typedef struct {
  void (*complete)(MochiFfiError *error, const MochiFfiResponseAndDebugInfo *result, const void *context);
  const void *context;
  MochiCancellationId cancellation_id;
} MochiCPromiseFfiResponseAndDebugInfo;

typedef void (*MochiReceivedIncomingMessage)(void *ctx, MochiOwnedBuffer envelope, uint64_t timestamp_millis, MochiServerMessageAck *cleanup);

typedef void (*MochiReceivedQueueEmpty)(void *ctx);

typedef void (*MochiConnectionInterrupted)(void *ctx);

typedef void (*MochiDestroyChatListener)(void *ctx);

/**
 * Callbacks for [`ChatListener`].
 *
 * Callbacks will be serialized (i.e. two calls will not come in at the same time), but may not
 * always happen on the same thread. Calls should be responded to promptly to avoid blocking later
 * messages.
 */
typedef struct {
  void *ctx;
  MochiReceivedIncomingMessage received_incoming_message;
  MochiReceivedQueueEmpty received_queue_empty;
  MochiConnectionInterrupted connection_interrupted;
  MochiDestroyChatListener destroy;
} MochiFfiChatListenerStruct;

typedef MochiFfiChatListenerStruct MochiFfiMakeChatListenerStruct;

typedef MochiBytestringArray MochiStringArray;

typedef int (*MochiRead)(void *ctx, uint8_t *buf, size_t buf_len, size_t *amount_read);

typedef int (*MochiSkip)(void *ctx, uint64_t amount);

typedef struct {
  void *ctx;
  MochiRead read;
  MochiSkip skip;
} MochiInputStream;

typedef MochiInputStream MochiSyncInputStream;

/**
 * A C callback used to report the results of Rust futures.
 *
 * cbindgen will produce independent C types like `MochiCPromisei32` and
 * `MochiCPromiseProtocolAddress`.
 *
 * This derives Copy because it behaves like a C type; nevertheless, a promise should still only be
 * completed once.
 */
typedef struct {
  void (*complete)(MochiFfiError *error, const int32_t *result, const void *context);
  const void *context;
  MochiCancellationId cancellation_id;
} MochiCPromisei32;

/**
 * A C callback used to report the results of Rust futures.
 *
 * cbindgen will produce independent C types like `MochiCPromisei32` and
 * `MochiCPromiseProtocolAddress`.
 *
 * This derives Copy because it behaves like a C type; nevertheless, a promise should still only be
 * completed once.
 */
typedef struct {
  void (*complete)(MochiFfiError *error, MochiTestingHandleType *const *result, const void *context);
  const void *context;
  MochiCancellationId cancellation_id;
} MochiCPromiseTestingHandleType;

/**
 * A C callback used to report the results of Rust futures.
 *
 * cbindgen will produce independent C types like `MochiCPromisei32` and
 * `MochiCPromiseProtocolAddress`.
 *
 * This derives Copy because it behaves like a C type; nevertheless, a promise should still only be
 * completed once.
 */
typedef struct {
  void (*complete)(MochiFfiError *error, MochiOtherTestingHandleType *const *result, const void *context);
  const void *context;
  MochiCancellationId cancellation_id;
} MochiCPromiseOtherTestingHandleType;

/**
 * A C callback used to report the results of Rust futures.
 *
 * cbindgen will produce independent C types like `MochiCPromisei32` and
 * `MochiCPromiseProtocolAddress`.
 *
 * This derives Copy because it behaves like a C type; nevertheless, a promise should still only be
 * completed once.
 */
typedef struct {
  void (*complete)(MochiFfiError *error, const void *const *result, const void *context);
  const void *context;
  MochiCancellationId cancellation_id;
} MochiCPromiseRawPointer;

typedef uint8_t MochiRandomnessBytes[MochiRANDOMNESS_LEN];

void mochi_print_ptr(const void *p);

void mochi_free_string(const char *buf);

void mochi_free_buffer(const unsigned char *buf, size_t buf_len);

void mochi_free_list_of_strings(MochiOwnedBufferOfCStringPtr buffer);

void mochi_free_lookup_response_entry_list(MochiOwnedBufferOfFfiCdsiLookupResponseEntry buffer);

void mochi_free_bytestring_array(MochiBytestringArray array);

MochiFfiError *mochi_error_get_message(const MochiFfiError *err, const char **out);

MochiFfiError *mochi_error_get_address(const MochiFfiError *err, MochiProtocolAddress **out);

MochiFfiError *mochi_error_get_uuid(const MochiFfiError *err, uint8_t (*out)[16]);

uint32_t mochi_error_get_type(const MochiFfiError *err);

MochiFfiError *mochi_error_get_retry_after_seconds(const MochiFfiError *err, uint32_t *out);

MochiFfiError *mochi_error_get_tries_remaining(const MochiFfiError *err, uint32_t *out);

void mochi_error_free(MochiFfiError *err);

MochiFfiError *mochi_identitykeypair_deserialize(MochiPrivateKey **private_key, MochiPublicKey **public_key, MochiBorrowedBuffer input);

MochiFfiError *mochi_sealed_session_cipher_decrypt(MochiOwnedBuffer *out, const char **sender_e164, const char **sender_uuid, uint32_t *sender_device_id, MochiBorrowedBuffer ctext, const MochiPublicKey *trust_root, uint64_t timestamp, const char *local_e164, const char *local_uuid, unsigned int local_device_id, const MochiSessionStore *session_store, const MochiIdentityKeyStore *identity_store, const MochiPreKeyStore *prekey_store, const MochiSignedPreKeyStore *signed_prekey_store);

bool mochi_init_logger(MochiLogLevel max_level, MochiFfiLogger logger);

MochiFfiError *mochi_aes256_gcm_siv_destroy(MochiAes256GcmSiv *p);

MochiFfiError *mochi_aes256_ctr32_destroy(MochiAes256Ctr32 *p);

MochiFfiError *mochi_aes256_gcm_encryption_destroy(MochiAes256GcmEncryption *p);

MochiFfiError *mochi_aes256_gcm_decryption_destroy(MochiAes256GcmDecryption *p);

MochiFfiError *mochi_aes256_ctr32_new(MochiAes256Ctr32 **out, MochiBorrowedBuffer key, MochiBorrowedBuffer nonce, uint32_t initial_ctr);

MochiFfiError *mochi_aes256_ctr32_process(MochiAes256Ctr32 *ctr, MochiBorrowedMutableBuffer data, uint32_t offset, uint32_t length);

MochiFfiError *mochi_aes256_gcm_encryption_new(MochiAes256GcmEncryption **out, MochiBorrowedBuffer key, MochiBorrowedBuffer nonce, MochiBorrowedBuffer associated_data);

MochiFfiError *mochi_aes256_gcm_encryption_update(MochiAes256GcmEncryption *gcm, MochiBorrowedMutableBuffer data, uint32_t offset, uint32_t length);

MochiFfiError *mochi_aes256_gcm_encryption_compute_tag(MochiOwnedBuffer *out, MochiAes256GcmEncryption *gcm);

MochiFfiError *mochi_aes256_gcm_decryption_new(MochiAes256GcmDecryption **out, MochiBorrowedBuffer key, MochiBorrowedBuffer nonce, MochiBorrowedBuffer associated_data);

MochiFfiError *mochi_aes256_gcm_decryption_update(MochiAes256GcmDecryption *gcm, MochiBorrowedMutableBuffer data, uint32_t offset, uint32_t length);

MochiFfiError *mochi_aes256_gcm_decryption_verify_tag(bool *out, MochiAes256GcmDecryption *gcm, MochiBorrowedBuffer tag);

MochiFfiError *mochi_aes256_gcm_siv_new(MochiAes256GcmSiv **out, MochiBorrowedBuffer key);

MochiFfiError *mochi_aes256_gcm_siv_encrypt(MochiOwnedBuffer *out, const MochiAes256GcmSiv *aes_gcm_siv_obj, MochiBorrowedBuffer ptext, MochiBorrowedBuffer nonce, MochiBorrowedBuffer associated_data);

MochiFfiError *mochi_aes256_gcm_siv_decrypt(MochiOwnedBuffer *out, const MochiAes256GcmSiv *aes_gcm_siv, MochiBorrowedBuffer ctext, MochiBorrowedBuffer nonce, MochiBorrowedBuffer associated_data);

MochiFfiError *mochi_ciphertext_message_destroy(MochiCiphertextMessage *p);

MochiFfiError *mochi_decryption_error_message_destroy(MochiDecryptionErrorMessage *p);

MochiFfiError *mochi_decryption_error_message_clone(MochiDecryptionErrorMessage **new_obj, const MochiDecryptionErrorMessage *obj);

MochiFfiError *mochi_fingerprint_destroy(MochiFingerprint *p);

MochiFfiError *mochi_fingerprint_clone(MochiFingerprint **new_obj, const MochiFingerprint *obj);

MochiFfiError *mochi_plaintext_content_destroy(MochiPlaintextContent *p);

MochiFfiError *mochi_plaintext_content_clone(MochiPlaintextContent **new_obj, const MochiPlaintextContent *obj);

MochiFfiError *mochi_pre_key_bundle_destroy(MochiPreKeyBundle *p);

MochiFfiError *mochi_pre_key_bundle_clone(MochiPreKeyBundle **new_obj, const MochiPreKeyBundle *obj);

MochiFfiError *mochi_pre_key_record_destroy(MochiPreKeyRecord *p);

MochiFfiError *mochi_pre_key_record_clone(MochiPreKeyRecord **new_obj, const MochiPreKeyRecord *obj);

MochiFfiError *mochi_pre_key_mochi_message_destroy(MochiPreKeyMochiMessage *p);

MochiFfiError *mochi_pre_key_mochi_message_clone(MochiPreKeyMochiMessage **new_obj, const MochiPreKeyMochiMessage *obj);

MochiFfiError *mochi_privatekey_destroy(MochiPrivateKey *p);

MochiFfiError *mochi_privatekey_clone(MochiPrivateKey **new_obj, const MochiPrivateKey *obj);

MochiFfiError *mochi_address_destroy(MochiProtocolAddress *p);

MochiFfiError *mochi_address_clone(MochiProtocolAddress **new_obj, const MochiProtocolAddress *obj);

MochiFfiError *mochi_publickey_destroy(MochiPublicKey *p);

MochiFfiError *mochi_publickey_clone(MochiPublicKey **new_obj, const MochiPublicKey *obj);

MochiFfiError *mochi_sender_certificate_destroy(MochiSenderCertificate *p);

MochiFfiError *mochi_sender_certificate_clone(MochiSenderCertificate **new_obj, const MochiSenderCertificate *obj);

MochiFfiError *mochi_sender_key_distribution_message_destroy(MochiSenderKeyDistributionMessage *p);

MochiFfiError *mochi_sender_key_distribution_message_clone(MochiSenderKeyDistributionMessage **new_obj, const MochiSenderKeyDistributionMessage *obj);

MochiFfiError *mochi_sender_key_message_destroy(MochiSenderKeyMessage *p);

MochiFfiError *mochi_sender_key_message_clone(MochiSenderKeyMessage **new_obj, const MochiSenderKeyMessage *obj);

MochiFfiError *mochi_sender_key_record_destroy(MochiSenderKeyRecord *p);

MochiFfiError *mochi_sender_key_record_clone(MochiSenderKeyRecord **new_obj, const MochiSenderKeyRecord *obj);

MochiFfiError *mochi_server_certificate_destroy(MochiServerCertificate *p);

MochiFfiError *mochi_server_certificate_clone(MochiServerCertificate **new_obj, const MochiServerCertificate *obj);

MochiFfiError *mochi_session_record_destroy(MochiSessionRecord *p);

MochiFfiError *mochi_session_record_clone(MochiSessionRecord **new_obj, const MochiSessionRecord *obj);

MochiFfiError *mochi_message_destroy(MochiMessage *p);

MochiFfiError *mochi_message_clone(MochiMessage **new_obj, const MochiMessage *obj);

MochiFfiError *mochi_signed_pre_key_record_destroy(MochiSignedPreKeyRecord *p);

MochiFfiError *mochi_signed_pre_key_record_clone(MochiSignedPreKeyRecord **new_obj, const MochiSignedPreKeyRecord *obj);

MochiFfiError *mochi_kyber_pre_key_record_destroy(MochiKyberPreKeyRecord *p);

MochiFfiError *mochi_kyber_pre_key_record_clone(MochiKyberPreKeyRecord **new_obj, const MochiKyberPreKeyRecord *obj);

MochiFfiError *mochi_unidentified_sender_message_content_destroy(MochiUnidentifiedSenderMessageContent *p);

MochiFfiError *mochi_kyber_key_pair_destroy(MochiKyberKeyPair *p);

MochiFfiError *mochi_kyber_key_pair_clone(MochiKyberKeyPair **new_obj, const MochiKyberKeyPair *obj);

MochiFfiError *mochi_kyber_public_key_destroy(MochiKyberPublicKey *p);

MochiFfiError *mochi_kyber_public_key_clone(MochiKyberPublicKey **new_obj, const MochiKyberPublicKey *obj);

MochiFfiError *mochi_kyber_secret_key_destroy(MochiKyberSecretKey *p);

MochiFfiError *mochi_kyber_secret_key_clone(MochiKyberSecretKey **new_obj, const MochiKyberSecretKey *obj);

MochiFfiError *mochi_hkdf_derive(MochiBorrowedMutableBuffer output, MochiBorrowedBuffer ikm, MochiBorrowedBuffer label, MochiBorrowedBuffer salt);

MochiFfiError *mochi_service_id_service_id_binary(MochiOwnedBuffer *out, const MochiServiceIdFixedWidthBinaryBytes *value);

MochiFfiError *mochi_service_id_service_id_string(const char **out, const MochiServiceIdFixedWidthBinaryBytes *value);

MochiFfiError *mochi_service_id_service_id_log(const char **out, const MochiServiceIdFixedWidthBinaryBytes *value);

MochiFfiError *mochi_service_id_parse_from_service_id_binary(MochiServiceIdFixedWidthBinaryBytes *out, MochiBorrowedBuffer input);

MochiFfiError *mochi_service_id_parse_from_service_id_string(MochiServiceIdFixedWidthBinaryBytes *out, const char *input);

MochiFfiError *mochi_address_new(MochiProtocolAddress **out, const char *name, uint32_t device_id);

MochiFfiError *mochi_publickey_deserialize(MochiPublicKey **out, MochiBorrowedBuffer data);

MochiFfiError *mochi_publickey_serialize(MochiOwnedBuffer *out, const MochiPublicKey *obj);

MochiFfiError *mochi_publickey_get_public_key_bytes(MochiOwnedBuffer *out, const MochiPublicKey *obj);

MochiFfiError *mochi_address_get_device_id(uint32_t *out, const MochiProtocolAddress *obj);

MochiFfiError *mochi_address_get_name(const char **out, const MochiProtocolAddress *obj);

MochiFfiError *mochi_publickey_equals(bool *out, const MochiPublicKey *lhs, const MochiPublicKey *rhs);

MochiFfiError *mochi_publickey_compare(int32_t *out, const MochiPublicKey *key1, const MochiPublicKey *key2);

MochiFfiError *mochi_publickey_verify(bool *out, const MochiPublicKey *key, MochiBorrowedBuffer message, MochiBorrowedBuffer signature);

MochiFfiError *mochi_privatekey_deserialize(MochiPrivateKey **out, MochiBorrowedBuffer data);

MochiFfiError *mochi_privatekey_serialize(MochiOwnedBuffer *out, const MochiPrivateKey *obj);

MochiFfiError *mochi_privatekey_generate(MochiPrivateKey **out);

MochiFfiError *mochi_privatekey_get_public_key(MochiPublicKey **out, const MochiPrivateKey *k);

MochiFfiError *mochi_privatekey_sign(MochiOwnedBuffer *out, const MochiPrivateKey *key, MochiBorrowedBuffer message);

MochiFfiError *mochi_privatekey_agree(MochiOwnedBuffer *out, const MochiPrivateKey *private_key, const MochiPublicKey *public_key);

MochiFfiError *mochi_kyber_public_key_serialize(MochiOwnedBuffer *out, const MochiKyberPublicKey *obj);

MochiFfiError *mochi_kyber_public_key_deserialize(MochiKyberPublicKey **out, MochiBorrowedBuffer data);

MochiFfiError *mochi_kyber_secret_key_serialize(MochiOwnedBuffer *out, const MochiKyberSecretKey *obj);

MochiFfiError *mochi_kyber_secret_key_deserialize(MochiKyberSecretKey **out, MochiBorrowedBuffer data);

MochiFfiError *mochi_kyber_public_key_equals(bool *out, const MochiKyberPublicKey *lhs, const MochiKyberPublicKey *rhs);

MochiFfiError *mochi_kyber_key_pair_generate(MochiKyberKeyPair **out);

MochiFfiError *mochi_kyber_key_pair_get_public_key(MochiKyberPublicKey **out, const MochiKyberKeyPair *key_pair);

MochiFfiError *mochi_kyber_key_pair_get_secret_key(MochiKyberSecretKey **out, const MochiKyberKeyPair *key_pair);

MochiFfiError *mochi_identitykeypair_serialize(MochiOwnedBuffer *out, const MochiPublicKey *public_key, const MochiPrivateKey *private_key);

MochiFfiError *mochi_identitykeypair_sign_alternate_identity(MochiOwnedBuffer *out, const MochiPublicKey *public_key, const MochiPrivateKey *private_key, const MochiPublicKey *other_identity);

MochiFfiError *mochi_identitykey_verify_alternate_identity(bool *out, const MochiPublicKey *public_key, const MochiPublicKey *other_identity, MochiBorrowedBuffer signature);

MochiFfiError *mochi_fingerprint_new(MochiFingerprint **out, uint32_t iterations, uint32_t version, MochiBorrowedBuffer local_identifier, const MochiPublicKey *local_key, MochiBorrowedBuffer remote_identifier, const MochiPublicKey *remote_key);

MochiFfiError *mochi_fingerprint_scannable_encoding(MochiOwnedBuffer *out, const MochiFingerprint *obj);

MochiFfiError *mochi_fingerprint_display_string(const char **out, const MochiFingerprint *obj);

MochiFfiError *mochi_fingerprint_compare(bool *out, MochiBorrowedBuffer fprint1, MochiBorrowedBuffer fprint2);

MochiFfiError *mochi_message_deserialize(MochiMessage **out, MochiBorrowedBuffer data);

MochiFfiError *mochi_message_get_body(MochiOwnedBuffer *out, const MochiMessage *obj);

MochiFfiError *mochi_message_get_serialized(MochiOwnedBuffer *out, const MochiMessage *obj);

MochiFfiError *mochi_message_get_counter(uint32_t *out, const MochiMessage *obj);

MochiFfiError *mochi_message_get_message_version(uint32_t *out, const MochiMessage *obj);

MochiFfiError *mochi_message_new(MochiMessage **out, uint8_t message_version, MochiBorrowedBuffer mac_key, const MochiPublicKey *sender_ratchet_key, uint32_t counter, uint32_t previous_counter, MochiBorrowedBuffer ciphertext, const MochiPublicKey *sender_identity_key, const MochiPublicKey *receiver_identity_key);

MochiFfiError *mochi_message_verify_mac(bool *out, const MochiMessage *msg, const MochiPublicKey *sender_identity_key, const MochiPublicKey *receiver_identity_key, MochiBorrowedBuffer mac_key);

MochiFfiError *mochi_message_get_sender_ratchet_key(MochiPublicKey **out, const MochiMessage *m);

MochiFfiError *mochi_pre_key_mochi_message_new(MochiPreKeyMochiMessage **out, uint8_t message_version, uint32_t registration_id, uint32_t pre_key_id, uint32_t signed_pre_key_id, const MochiPublicKey *base_key, const MochiPublicKey *identity_key, const MochiMessage *mochi_message);

MochiFfiError *mochi_pre_key_mochi_message_get_base_key(MochiPublicKey **out, const MochiPreKeyMochiMessage *m);

MochiFfiError *mochi_pre_key_mochi_message_get_identity_key(MochiPublicKey **out, const MochiPreKeyMochiMessage *m);

MochiFfiError *mochi_pre_key_mochi_message_get_mochi_message(MochiMessage **out, const MochiPreKeyMochiMessage *m);

MochiFfiError *mochi_pre_key_mochi_message_deserialize(MochiPreKeyMochiMessage **out, MochiBorrowedBuffer data);

MochiFfiError *mochi_pre_key_mochi_message_serialize(MochiOwnedBuffer *out, const MochiPreKeyMochiMessage *obj);

MochiFfiError *mochi_pre_key_mochi_message_get_registration_id(uint32_t *out, const MochiPreKeyMochiMessage *obj);

MochiFfiError *mochi_pre_key_mochi_message_get_signed_pre_key_id(uint32_t *out, const MochiPreKeyMochiMessage *obj);

MochiFfiError *mochi_pre_key_mochi_message_get_pre_key_id(uint32_t *out, const MochiPreKeyMochiMessage *obj);

MochiFfiError *mochi_pre_key_mochi_message_get_version(uint32_t *out, const MochiPreKeyMochiMessage *obj);

MochiFfiError *mochi_sender_key_message_deserialize(MochiSenderKeyMessage **out, MochiBorrowedBuffer data);

MochiFfiError *mochi_sender_key_message_get_cipher_text(MochiOwnedBuffer *out, const MochiSenderKeyMessage *obj);

MochiFfiError *mochi_sender_key_message_serialize(MochiOwnedBuffer *out, const MochiSenderKeyMessage *obj);

MochiFfiError *mochi_sender_key_message_get_distribution_id(uint8_t (*out)[16], const MochiSenderKeyMessage *obj);

MochiFfiError *mochi_sender_key_message_get_chain_id(uint32_t *out, const MochiSenderKeyMessage *obj);

MochiFfiError *mochi_sender_key_message_get_iteration(uint32_t *out, const MochiSenderKeyMessage *obj);

MochiFfiError *mochi_sender_key_message_new(MochiSenderKeyMessage **out, uint8_t message_version, const uint8_t (*distribution_id)[16], uint32_t chain_id, uint32_t iteration, MochiBorrowedBuffer ciphertext, const MochiPrivateKey *pk);

MochiFfiError *mochi_sender_key_message_verify_signature(bool *out, const MochiSenderKeyMessage *skm, const MochiPublicKey *pubkey);

MochiFfiError *mochi_sender_key_distribution_message_deserialize(MochiSenderKeyDistributionMessage **out, MochiBorrowedBuffer data);

MochiFfiError *mochi_sender_key_distribution_message_get_chain_key(MochiOwnedBuffer *out, const MochiSenderKeyDistributionMessage *obj);

MochiFfiError *mochi_sender_key_distribution_message_serialize(MochiOwnedBuffer *out, const MochiSenderKeyDistributionMessage *obj);

MochiFfiError *mochi_sender_key_distribution_message_get_distribution_id(uint8_t (*out)[16], const MochiSenderKeyDistributionMessage *obj);

MochiFfiError *mochi_sender_key_distribution_message_get_chain_id(uint32_t *out, const MochiSenderKeyDistributionMessage *obj);

MochiFfiError *mochi_sender_key_distribution_message_get_iteration(uint32_t *out, const MochiSenderKeyDistributionMessage *obj);

MochiFfiError *mochi_sender_key_distribution_message_new(MochiSenderKeyDistributionMessage **out, uint8_t message_version, const uint8_t (*distribution_id)[16], uint32_t chain_id, uint32_t iteration, MochiBorrowedBuffer chainkey, const MochiPublicKey *pk);

MochiFfiError *mochi_sender_key_distribution_message_get_signature_key(MochiPublicKey **out, const MochiSenderKeyDistributionMessage *m);

MochiFfiError *mochi_decryption_error_message_deserialize(MochiDecryptionErrorMessage **out, MochiBorrowedBuffer data);

MochiFfiError *mochi_decryption_error_message_get_timestamp(uint64_t *out, const MochiDecryptionErrorMessage *obj);

MochiFfiError *mochi_decryption_error_message_get_device_id(uint32_t *out, const MochiDecryptionErrorMessage *obj);

MochiFfiError *mochi_decryption_error_message_serialize(MochiOwnedBuffer *out, const MochiDecryptionErrorMessage *obj);

MochiFfiError *mochi_decryption_error_message_get_ratchet_key(MochiPublicKey **out, const MochiDecryptionErrorMessage *m);

MochiFfiError *mochi_decryption_error_message_for_original_message(MochiDecryptionErrorMessage **out, MochiBorrowedBuffer original_bytes, uint8_t original_type, uint64_t original_timestamp, uint32_t original_sender_device_id);

MochiFfiError *mochi_decryption_error_message_extract_from_serialized_content(MochiDecryptionErrorMessage **out, MochiBorrowedBuffer bytes);

MochiFfiError *mochi_plaintext_content_deserialize(MochiPlaintextContent **out, MochiBorrowedBuffer data);

MochiFfiError *mochi_plaintext_content_serialize(MochiOwnedBuffer *out, const MochiPlaintextContent *obj);

MochiFfiError *mochi_plaintext_content_get_body(MochiOwnedBuffer *out, const MochiPlaintextContent *obj);

MochiFfiError *mochi_plaintext_content_from_decryption_error_message(MochiPlaintextContent **out, const MochiDecryptionErrorMessage *m);

MochiFfiError *mochi_pre_key_bundle_new(MochiPreKeyBundle **out, uint32_t registration_id, uint32_t device_id, uint32_t prekey_id, const MochiPublicKey *prekey, uint32_t signed_prekey_id, const MochiPublicKey *signed_prekey, MochiBorrowedBuffer signed_prekey_signature, const MochiPublicKey *identity_key, uint32_t kyber_prekey_id, const MochiKyberPublicKey *kyber_prekey, MochiBorrowedBuffer kyber_prekey_signature);

MochiFfiError *mochi_pre_key_bundle_get_identity_key(MochiPublicKey **out, const MochiPreKeyBundle *p);

MochiFfiError *mochi_pre_key_bundle_get_signed_pre_key_signature(MochiOwnedBuffer *out, const MochiPreKeyBundle *obj);

MochiFfiError *mochi_pre_key_bundle_get_registration_id(uint32_t *out, const MochiPreKeyBundle *obj);

MochiFfiError *mochi_pre_key_bundle_get_device_id(uint32_t *out, const MochiPreKeyBundle *obj);

MochiFfiError *mochi_pre_key_bundle_get_signed_pre_key_id(uint32_t *out, const MochiPreKeyBundle *obj);

MochiFfiError *mochi_pre_key_bundle_get_pre_key_id(uint32_t *out, const MochiPreKeyBundle *obj);

MochiFfiError *mochi_pre_key_bundle_get_pre_key_public(MochiPublicKey **out, const MochiPreKeyBundle *obj);

MochiFfiError *mochi_pre_key_bundle_get_signed_pre_key_public(MochiPublicKey **out, const MochiPreKeyBundle *obj);

MochiFfiError *mochi_pre_key_bundle_get_kyber_pre_key_id(uint32_t *out, const MochiPreKeyBundle *obj);

MochiFfiError *mochi_pre_key_bundle_get_kyber_pre_key_public(MochiKyberPublicKey **out, const MochiPreKeyBundle *bundle);

MochiFfiError *mochi_pre_key_bundle_get_kyber_pre_key_signature(MochiOwnedBuffer *out, const MochiPreKeyBundle *bundle);

MochiFfiError *mochi_signed_pre_key_record_deserialize(MochiSignedPreKeyRecord **out, MochiBorrowedBuffer data);

MochiFfiError *mochi_signed_pre_key_record_get_signature(MochiOwnedBuffer *out, const MochiSignedPreKeyRecord *obj);

MochiFfiError *mochi_signed_pre_key_record_serialize(MochiOwnedBuffer *out, const MochiSignedPreKeyRecord *obj);

MochiFfiError *mochi_signed_pre_key_record_get_id(uint32_t *out, const MochiSignedPreKeyRecord *obj);

MochiFfiError *mochi_signed_pre_key_record_get_timestamp(uint64_t *out, const MochiSignedPreKeyRecord *obj);

MochiFfiError *mochi_signed_pre_key_record_get_public_key(MochiPublicKey **out, const MochiSignedPreKeyRecord *obj);

MochiFfiError *mochi_signed_pre_key_record_get_private_key(MochiPrivateKey **out, const MochiSignedPreKeyRecord *obj);

MochiFfiError *mochi_kyber_pre_key_record_deserialize(MochiKyberPreKeyRecord **out, MochiBorrowedBuffer data);

MochiFfiError *mochi_kyber_pre_key_record_get_signature(MochiOwnedBuffer *out, const MochiKyberPreKeyRecord *obj);

MochiFfiError *mochi_kyber_pre_key_record_serialize(MochiOwnedBuffer *out, const MochiKyberPreKeyRecord *obj);

MochiFfiError *mochi_kyber_pre_key_record_get_id(uint32_t *out, const MochiKyberPreKeyRecord *obj);

MochiFfiError *mochi_kyber_pre_key_record_get_timestamp(uint64_t *out, const MochiKyberPreKeyRecord *obj);

MochiFfiError *mochi_kyber_pre_key_record_get_public_key(MochiKyberPublicKey **out, const MochiKyberPreKeyRecord *obj);

MochiFfiError *mochi_kyber_pre_key_record_get_secret_key(MochiKyberSecretKey **out, const MochiKyberPreKeyRecord *obj);

MochiFfiError *mochi_kyber_pre_key_record_get_key_pair(MochiKyberKeyPair **out, const MochiKyberPreKeyRecord *obj);

MochiFfiError *mochi_signed_pre_key_record_new(MochiSignedPreKeyRecord **out, uint32_t id, uint64_t timestamp, const MochiPublicKey *pub_key, const MochiPrivateKey *priv_key, MochiBorrowedBuffer signature);

MochiFfiError *mochi_kyber_pre_key_record_new(MochiKyberPreKeyRecord **out, uint32_t id, uint64_t timestamp, const MochiKyberKeyPair *key_pair, MochiBorrowedBuffer signature);

MochiFfiError *mochi_pre_key_record_deserialize(MochiPreKeyRecord **out, MochiBorrowedBuffer data);

MochiFfiError *mochi_pre_key_record_serialize(MochiOwnedBuffer *out, const MochiPreKeyRecord *obj);

MochiFfiError *mochi_pre_key_record_get_id(uint32_t *out, const MochiPreKeyRecord *obj);

MochiFfiError *mochi_pre_key_record_get_public_key(MochiPublicKey **out, const MochiPreKeyRecord *obj);

MochiFfiError *mochi_pre_key_record_get_private_key(MochiPrivateKey **out, const MochiPreKeyRecord *obj);

MochiFfiError *mochi_pre_key_record_new(MochiPreKeyRecord **out, uint32_t id, const MochiPublicKey *pub_key, const MochiPrivateKey *priv_key);

MochiFfiError *mochi_sender_key_record_deserialize(MochiSenderKeyRecord **out, MochiBorrowedBuffer data);

MochiFfiError *mochi_sender_key_record_serialize(MochiOwnedBuffer *out, const MochiSenderKeyRecord *obj);

MochiFfiError *mochi_server_certificate_deserialize(MochiServerCertificate **out, MochiBorrowedBuffer data);

MochiFfiError *mochi_server_certificate_get_serialized(MochiOwnedBuffer *out, const MochiServerCertificate *obj);

MochiFfiError *mochi_server_certificate_get_certificate(MochiOwnedBuffer *out, const MochiServerCertificate *obj);

MochiFfiError *mochi_server_certificate_get_signature(MochiOwnedBuffer *out, const MochiServerCertificate *obj);

MochiFfiError *mochi_server_certificate_get_key_id(uint32_t *out, const MochiServerCertificate *obj);

MochiFfiError *mochi_server_certificate_get_key(MochiPublicKey **out, const MochiServerCertificate *obj);

MochiFfiError *mochi_server_certificate_new(MochiServerCertificate **out, uint32_t key_id, const MochiPublicKey *server_key, const MochiPrivateKey *trust_root);

MochiFfiError *mochi_sender_certificate_deserialize(MochiSenderCertificate **out, MochiBorrowedBuffer data);

MochiFfiError *mochi_sender_certificate_get_serialized(MochiOwnedBuffer *out, const MochiSenderCertificate *obj);

MochiFfiError *mochi_sender_certificate_get_certificate(MochiOwnedBuffer *out, const MochiSenderCertificate *obj);

MochiFfiError *mochi_sender_certificate_get_signature(MochiOwnedBuffer *out, const MochiSenderCertificate *obj);

MochiFfiError *mochi_sender_certificate_get_sender_uuid(const char **out, const MochiSenderCertificate *obj);

MochiFfiError *mochi_sender_certificate_get_sender_e164(const char **out, const MochiSenderCertificate *obj);

MochiFfiError *mochi_sender_certificate_get_expiration(uint64_t *out, const MochiSenderCertificate *obj);

MochiFfiError *mochi_sender_certificate_get_device_id(uint32_t *out, const MochiSenderCertificate *obj);

MochiFfiError *mochi_sender_certificate_get_key(MochiPublicKey **out, const MochiSenderCertificate *obj);

MochiFfiError *mochi_sender_certificate_validate(bool *out, const MochiSenderCertificate *cert, const MochiPublicKey *key, uint64_t time);

MochiFfiError *mochi_sender_certificate_get_server_certificate(MochiServerCertificate **out, const MochiSenderCertificate *cert);

MochiFfiError *mochi_sender_certificate_new(MochiSenderCertificate **out, const char *sender_uuid, const char *sender_e164, uint32_t sender_device_id, const MochiPublicKey *sender_key, uint64_t expiration, const MochiServerCertificate *signer_cert, const MochiPrivateKey *signer_key);

MochiFfiError *mochi_unidentified_sender_message_content_deserialize(MochiUnidentifiedSenderMessageContent **out, MochiBorrowedBuffer data);

MochiFfiError *mochi_unidentified_sender_message_content_serialize(MochiOwnedBuffer *out, const MochiUnidentifiedSenderMessageContent *obj);

MochiFfiError *mochi_unidentified_sender_message_content_get_contents(MochiOwnedBuffer *out, const MochiUnidentifiedSenderMessageContent *obj);

MochiFfiError *mochi_unidentified_sender_message_content_get_group_id_or_empty(MochiOwnedBuffer *out, const MochiUnidentifiedSenderMessageContent *m);

MochiFfiError *mochi_unidentified_sender_message_content_get_sender_cert(MochiSenderCertificate **out, const MochiUnidentifiedSenderMessageContent *m);

MochiFfiError *mochi_unidentified_sender_message_content_get_msg_type(uint8_t *out, const MochiUnidentifiedSenderMessageContent *m);

MochiFfiError *mochi_unidentified_sender_message_content_get_content_hint(uint32_t *out, const MochiUnidentifiedSenderMessageContent *m);

MochiFfiError *mochi_unidentified_sender_message_content_new(MochiUnidentifiedSenderMessageContent **out, const MochiCiphertextMessage *message, const MochiSenderCertificate *sender, uint32_t content_hint, MochiBorrowedBuffer group_id);

MochiFfiError *mochi_ciphertext_message_type(uint8_t *out, const MochiCiphertextMessage *msg);

MochiFfiError *mochi_ciphertext_message_serialize(MochiOwnedBuffer *out, const MochiCiphertextMessage *obj);

MochiFfiError *mochi_ciphertext_message_from_plaintext_content(MochiCiphertextMessage **out, const MochiPlaintextContent *m);

MochiFfiError *mochi_session_record_archive_current_state(MochiSessionRecord *session_record);

MochiFfiError *mochi_session_record_has_usable_sender_chain(bool *out, const MochiSessionRecord *s, uint64_t now);

MochiFfiError *mochi_session_record_current_ratchet_key_matches(bool *out, const MochiSessionRecord *s, const MochiPublicKey *key);

MochiFfiError *mochi_session_record_deserialize(MochiSessionRecord **out, MochiBorrowedBuffer data);

MochiFfiError *mochi_session_record_serialize(MochiOwnedBuffer *out, const MochiSessionRecord *obj);

MochiFfiError *mochi_session_record_get_local_registration_id(uint32_t *out, const MochiSessionRecord *obj);

MochiFfiError *mochi_session_record_get_remote_registration_id(uint32_t *out, const MochiSessionRecord *obj);

MochiFfiError *mochi_process_prekey_bundle(const MochiPreKeyBundle *bundle, const MochiProtocolAddress *protocol_address, const MochiSessionStore *session_store, const MochiIdentityKeyStore *identity_key_store, uint64_t now);

MochiFfiError *mochi_encrypt_message(MochiCiphertextMessage **out, MochiBorrowedBuffer ptext, const MochiProtocolAddress *protocol_address, const MochiSessionStore *session_store, const MochiIdentityKeyStore *identity_key_store, uint64_t now);

MochiFfiError *mochi_decrypt_message(MochiOwnedBuffer *out, const MochiMessage *message, const MochiProtocolAddress *protocol_address, const MochiSessionStore *session_store, const MochiIdentityKeyStore *identity_key_store);

MochiFfiError *mochi_decrypt_pre_key_message(MochiOwnedBuffer *out, const MochiPreKeyMochiMessage *message, const MochiProtocolAddress *protocol_address, const MochiSessionStore *session_store, const MochiIdentityKeyStore *identity_key_store, const MochiPreKeyStore *prekey_store, const MochiSignedPreKeyStore *signed_prekey_store, const MochiKyberPreKeyStore *kyber_prekey_store);

MochiFfiError *mochi_sealed_session_cipher_encrypt(MochiOwnedBuffer *out, const MochiProtocolAddress *destination, const MochiUnidentifiedSenderMessageContent *content, const MochiIdentityKeyStore *identity_key_store);

MochiFfiError *mochi_sealed_sender_multi_recipient_encrypt(MochiOwnedBuffer *out, MochiBorrowedSliceOfProtocolAddress recipients, MochiBorrowedSliceOfSessionRecord recipient_sessions, MochiBorrowedBuffer excluded_recipients, const MochiUnidentifiedSenderMessageContent *content, const MochiIdentityKeyStore *identity_key_store);

MochiFfiError *mochi_sealed_sender_multi_recipient_message_for_single_recipient(MochiOwnedBuffer *out, MochiBorrowedBuffer encoded_multi_recipient_message);

MochiFfiError *mochi_sealed_session_cipher_decrypt_to_usmc(MochiUnidentifiedSenderMessageContent **out, MochiBorrowedBuffer ctext, const MochiIdentityKeyStore *identity_store);

MochiFfiError *mochi_sender_key_distribution_message_create(MochiSenderKeyDistributionMessage **out, const MochiProtocolAddress *sender, const uint8_t (*distribution_id)[16], const MochiSenderKeyStore *store);

MochiFfiError *mochi_process_sender_key_distribution_message(const MochiProtocolAddress *sender, const MochiSenderKeyDistributionMessage *sender_key_distribution_message, const MochiSenderKeyStore *store);

MochiFfiError *mochi_group_encrypt_message(MochiCiphertextMessage **out, const MochiProtocolAddress *sender, const uint8_t (*distribution_id)[16], MochiBorrowedBuffer message, const MochiSenderKeyStore *store);

MochiFfiError *mochi_group_decrypt_message(MochiOwnedBuffer *out, const MochiProtocolAddress *sender, MochiBorrowedBuffer message, const MochiSenderKeyStore *store);

MochiFfiError *mochi_device_transfer_generate_private_key(MochiOwnedBuffer *out);

MochiFfiError *mochi_device_transfer_generate_private_key_with_format(MochiOwnedBuffer *out, uint8_t key_format);

MochiFfiError *mochi_device_transfer_generate_certificate(MochiOwnedBuffer *out, MochiBorrowedBuffer private_key, const char *name, uint32_t days_to_expire);

MochiFfiError *mochi_cds2_client_state_new(MochiSgxClientState **out, MochiBorrowedBuffer mrenclave, MochiBorrowedBuffer attestation_msg, uint64_t current_timestamp);

MochiFfiError *mochi_hsm_enclave_client_destroy(MochiHsmEnclaveClient *p);

MochiFfiError *mochi_hsm_enclave_client_new(MochiHsmEnclaveClient **out, MochiBorrowedBuffer trusted_public_key, MochiBorrowedBuffer trusted_code_hashes);

MochiFfiError *mochi_hsm_enclave_client_complete_handshake(MochiHsmEnclaveClient *cli, MochiBorrowedBuffer handshake_received);

MochiFfiError *mochi_hsm_enclave_client_established_send(MochiOwnedBuffer *out, MochiHsmEnclaveClient *cli, MochiBorrowedBuffer plaintext_to_send);

MochiFfiError *mochi_hsm_enclave_client_established_recv(MochiOwnedBuffer *out, MochiHsmEnclaveClient *cli, MochiBorrowedBuffer received_ciphertext);

MochiFfiError *mochi_hsm_enclave_client_initial_request(MochiOwnedBuffer *out, const MochiHsmEnclaveClient *obj);

MochiFfiError *mochi_sgx_client_state_destroy(MochiSgxClientState *p);

MochiFfiError *mochi_sgx_client_state_initial_request(MochiOwnedBuffer *out, const MochiSgxClientState *obj);

MochiFfiError *mochi_sgx_client_state_complete_handshake(MochiSgxClientState *cli, MochiBorrowedBuffer handshake_received);

MochiFfiError *mochi_sgx_client_state_established_send(MochiOwnedBuffer *out, MochiSgxClientState *cli, MochiBorrowedBuffer plaintext_to_send);

MochiFfiError *mochi_sgx_client_state_established_recv(MochiOwnedBuffer *out, MochiSgxClientState *cli, MochiBorrowedBuffer received_ciphertext);

MochiFfiError *mochi_expiring_profile_key_credential_check_valid_contents(MochiBorrowedBuffer buffer);

MochiFfiError *mochi_expiring_profile_key_credential_response_check_valid_contents(MochiBorrowedBuffer buffer);

MochiFfiError *mochi_group_master_key_check_valid_contents(MochiBorrowedBuffer buffer);

MochiFfiError *mochi_group_public_params_check_valid_contents(MochiBorrowedBuffer buffer);

MochiFfiError *mochi_group_secret_params_check_valid_contents(MochiBorrowedBuffer buffer);

MochiFfiError *mochi_profile_key_check_valid_contents(MochiBorrowedBuffer buffer);

MochiFfiError *mochi_profile_key_ciphertext_check_valid_contents(MochiBorrowedBuffer buffer);

MochiFfiError *mochi_profile_key_commitment_check_valid_contents(MochiBorrowedBuffer buffer);

MochiFfiError *mochi_profile_key_credential_request_check_valid_contents(MochiBorrowedBuffer buffer);

MochiFfiError *mochi_profile_key_credential_request_context_check_valid_contents(MochiBorrowedBuffer buffer);

MochiFfiError *mochi_receipt_credential_check_valid_contents(MochiBorrowedBuffer buffer);

MochiFfiError *mochi_receipt_credential_presentation_check_valid_contents(MochiBorrowedBuffer buffer);

MochiFfiError *mochi_receipt_credential_request_check_valid_contents(MochiBorrowedBuffer buffer);

MochiFfiError *mochi_receipt_credential_request_context_check_valid_contents(MochiBorrowedBuffer buffer);

MochiFfiError *mochi_receipt_credential_response_check_valid_contents(MochiBorrowedBuffer buffer);

MochiFfiError *mochi_uuid_ciphertext_check_valid_contents(MochiBorrowedBuffer buffer);

MochiFfiError *mochi_server_public_params_destroy(MochiServerPublicParams *p);

MochiFfiError *mochi_server_public_params_deserialize(MochiServerPublicParams **out, MochiBorrowedBuffer buffer);

MochiFfiError *mochi_server_public_params_serialize(MochiOwnedBuffer *out, const MochiServerPublicParams *handle);

MochiFfiError *mochi_server_secret_params_destroy(MochiServerSecretParams *p);

MochiFfiError *mochi_server_secret_params_deserialize(MochiServerSecretParams **out, MochiBorrowedBuffer buffer);

MochiFfiError *mochi_server_secret_params_serialize(MochiOwnedBuffer *out, const MochiServerSecretParams *handle);

MochiFfiError *mochi_profile_key_get_commitment(unsigned char (*out)[MochiPROFILE_KEY_COMMITMENT_LEN], const unsigned char (*profile_key)[MochiPROFILE_KEY_LEN], const MochiServiceIdFixedWidthBinaryBytes *user_id);

MochiFfiError *mochi_profile_key_get_profile_key_version(uint8_t (*out)[MochiPROFILE_KEY_VERSION_ENCODED_LEN], const unsigned char (*profile_key)[MochiPROFILE_KEY_LEN], const MochiServiceIdFixedWidthBinaryBytes *user_id);

MochiFfiError *mochi_profile_key_derive_access_key(uint8_t (*out)[MochiACCESS_KEY_LEN], const unsigned char (*profile_key)[MochiPROFILE_KEY_LEN]);

MochiFfiError *mochi_group_secret_params_generate_deterministic(unsigned char (*out)[MochiGROUP_SECRET_PARAMS_LEN], const uint8_t (*randomness)[MochiRANDOMNESS_LEN]);

MochiFfiError *mochi_group_secret_params_derive_from_master_key(unsigned char (*out)[MochiGROUP_SECRET_PARAMS_LEN], const unsigned char (*master_key)[MochiGROUP_MASTER_KEY_LEN]);

MochiFfiError *mochi_group_secret_params_get_master_key(unsigned char (*out)[MochiGROUP_MASTER_KEY_LEN], const unsigned char (*params)[MochiGROUP_SECRET_PARAMS_LEN]);

MochiFfiError *mochi_group_secret_params_get_public_params(unsigned char (*out)[MochiGROUP_PUBLIC_PARAMS_LEN], const unsigned char (*params)[MochiGROUP_SECRET_PARAMS_LEN]);

MochiFfiError *mochi_group_secret_params_encrypt_service_id(unsigned char (*out)[MochiUUID_CIPHERTEXT_LEN], const unsigned char (*params)[MochiGROUP_SECRET_PARAMS_LEN], const MochiServiceIdFixedWidthBinaryBytes *service_id);

MochiFfiError *mochi_group_secret_params_decrypt_service_id(MochiServiceIdFixedWidthBinaryBytes *out, const unsigned char (*params)[MochiGROUP_SECRET_PARAMS_LEN], const unsigned char (*ciphertext)[MochiUUID_CIPHERTEXT_LEN]);

MochiFfiError *mochi_group_secret_params_encrypt_profile_key(unsigned char (*out)[MochiPROFILE_KEY_CIPHERTEXT_LEN], const unsigned char (*params)[MochiGROUP_SECRET_PARAMS_LEN], const unsigned char (*profile_key)[MochiPROFILE_KEY_LEN], const MochiServiceIdFixedWidthBinaryBytes *user_id);

MochiFfiError *mochi_group_secret_params_decrypt_profile_key(unsigned char (*out)[MochiPROFILE_KEY_LEN], const unsigned char (*params)[MochiGROUP_SECRET_PARAMS_LEN], const unsigned char (*profile_key)[MochiPROFILE_KEY_CIPHERTEXT_LEN], const MochiServiceIdFixedWidthBinaryBytes *user_id);

MochiFfiError *mochi_group_secret_params_encrypt_blob_with_padding_deterministic(MochiOwnedBuffer *out, const unsigned char (*params)[MochiGROUP_SECRET_PARAMS_LEN], const uint8_t (*randomness)[MochiRANDOMNESS_LEN], MochiBorrowedBuffer plaintext, uint32_t padding_len);

MochiFfiError *mochi_group_secret_params_decrypt_blob_with_padding(MochiOwnedBuffer *out, const unsigned char (*params)[MochiGROUP_SECRET_PARAMS_LEN], MochiBorrowedBuffer ciphertext);

MochiFfiError *mochi_server_secret_params_generate_deterministic(MochiServerSecretParams **out, const uint8_t (*randomness)[MochiRANDOMNESS_LEN]);

MochiFfiError *mochi_server_secret_params_get_public_params(MochiServerPublicParams **out, const MochiServerSecretParams *params);

MochiFfiError *mochi_server_secret_params_sign_deterministic(uint8_t (*out)[MochiSIGNATURE_LEN], const MochiServerSecretParams *params, const uint8_t (*randomness)[MochiRANDOMNESS_LEN], MochiBorrowedBuffer message);

MochiFfiError *mochi_server_public_params_receive_auth_credential_with_pni_as_service_id(MochiOwnedBuffer *out, const MochiServerPublicParams *params, const MochiServiceIdFixedWidthBinaryBytes *aci, const MochiServiceIdFixedWidthBinaryBytes *pni, uint64_t redemption_time, MochiBorrowedBuffer auth_credential_with_pni_response_bytes);

MochiFfiError *mochi_server_public_params_create_auth_credential_with_pni_presentation_deterministic(MochiOwnedBuffer *out, const MochiServerPublicParams *server_public_params, const uint8_t (*randomness)[MochiRANDOMNESS_LEN], const unsigned char (*group_secret_params)[MochiGROUP_SECRET_PARAMS_LEN], MochiBorrowedBuffer auth_credential_with_pni_bytes);

MochiFfiError *mochi_server_public_params_create_profile_key_credential_request_context_deterministic(unsigned char (*out)[MochiPROFILE_KEY_CREDENTIAL_REQUEST_CONTEXT_LEN], const MochiServerPublicParams *server_public_params, const uint8_t (*randomness)[MochiRANDOMNESS_LEN], const MochiServiceIdFixedWidthBinaryBytes *user_id, const unsigned char (*profile_key)[MochiPROFILE_KEY_LEN]);

MochiFfiError *mochi_server_public_params_receive_expiring_profile_key_credential(unsigned char (*out)[MochiEXPIRING_PROFILE_KEY_CREDENTIAL_LEN], const MochiServerPublicParams *server_public_params, const unsigned char (*request_context)[MochiPROFILE_KEY_CREDENTIAL_REQUEST_CONTEXT_LEN], const unsigned char (*response)[MochiEXPIRING_PROFILE_KEY_CREDENTIAL_RESPONSE_LEN], uint64_t current_time_in_seconds);

MochiFfiError *mochi_server_public_params_create_expiring_profile_key_credential_presentation_deterministic(MochiOwnedBuffer *out, const MochiServerPublicParams *server_public_params, const uint8_t (*randomness)[MochiRANDOMNESS_LEN], const unsigned char (*group_secret_params)[MochiGROUP_SECRET_PARAMS_LEN], const unsigned char (*profile_key_credential)[MochiEXPIRING_PROFILE_KEY_CREDENTIAL_LEN]);

MochiFfiError *mochi_server_public_params_create_receipt_credential_request_context_deterministic(unsigned char (*out)[MochiRECEIPT_CREDENTIAL_REQUEST_CONTEXT_LEN], const MochiServerPublicParams *server_public_params, const uint8_t (*randomness)[MochiRANDOMNESS_LEN], const uint8_t (*receipt_serial)[MochiRECEIPT_SERIAL_LEN]);

MochiFfiError *mochi_server_public_params_receive_receipt_credential(unsigned char (*out)[MochiRECEIPT_CREDENTIAL_LEN], const MochiServerPublicParams *server_public_params, const unsigned char (*request_context)[MochiRECEIPT_CREDENTIAL_REQUEST_CONTEXT_LEN], const unsigned char (*response)[MochiRECEIPT_CREDENTIAL_RESPONSE_LEN]);

MochiFfiError *mochi_server_public_params_create_receipt_credential_presentation_deterministic(unsigned char (*out)[MochiRECEIPT_CREDENTIAL_PRESENTATION_LEN], const MochiServerPublicParams *server_public_params, const uint8_t (*randomness)[MochiRANDOMNESS_LEN], const unsigned char (*receipt_credential)[MochiRECEIPT_CREDENTIAL_LEN]);

MochiFfiError *mochi_server_secret_params_issue_auth_credential_with_pni_as_service_id_deterministic(MochiOwnedBuffer *out, const MochiServerSecretParams *server_secret_params, const uint8_t (*randomness)[MochiRANDOMNESS_LEN], const MochiServiceIdFixedWidthBinaryBytes *aci, const MochiServiceIdFixedWidthBinaryBytes *pni, uint64_t redemption_time);

MochiFfiError *mochi_server_secret_params_issue_auth_credential_with_pni_zkc_deterministic(MochiOwnedBuffer *out, const MochiServerSecretParams *server_secret_params, const uint8_t (*randomness)[MochiRANDOMNESS_LEN], const MochiServiceIdFixedWidthBinaryBytes *aci, const MochiServiceIdFixedWidthBinaryBytes *pni, uint64_t redemption_time);

MochiFfiError *mochi_auth_credential_with_pni_check_valid_contents(MochiBorrowedBuffer bytes);

MochiFfiError *mochi_auth_credential_with_pni_response_check_valid_contents(MochiBorrowedBuffer bytes);

MochiFfiError *mochi_server_secret_params_verify_auth_credential_presentation(const MochiServerSecretParams *server_secret_params, const unsigned char (*group_public_params)[MochiGROUP_PUBLIC_PARAMS_LEN], MochiBorrowedBuffer presentation_bytes, uint64_t current_time_in_seconds);

MochiFfiError *mochi_server_secret_params_issue_expiring_profile_key_credential_deterministic(unsigned char (*out)[MochiEXPIRING_PROFILE_KEY_CREDENTIAL_RESPONSE_LEN], const MochiServerSecretParams *server_secret_params, const uint8_t (*randomness)[MochiRANDOMNESS_LEN], const unsigned char (*request)[MochiPROFILE_KEY_CREDENTIAL_REQUEST_LEN], const MochiServiceIdFixedWidthBinaryBytes *user_id, const unsigned char (*commitment)[MochiPROFILE_KEY_COMMITMENT_LEN], uint64_t expiration_in_seconds);

MochiFfiError *mochi_server_secret_params_verify_profile_key_credential_presentation(const MochiServerSecretParams *server_secret_params, const unsigned char (*group_public_params)[MochiGROUP_PUBLIC_PARAMS_LEN], MochiBorrowedBuffer presentation_bytes, uint64_t current_time_in_seconds);

MochiFfiError *mochi_server_secret_params_issue_receipt_credential_deterministic(unsigned char (*out)[MochiRECEIPT_CREDENTIAL_RESPONSE_LEN], const MochiServerSecretParams *server_secret_params, const uint8_t (*randomness)[MochiRANDOMNESS_LEN], const unsigned char (*request)[MochiRECEIPT_CREDENTIAL_REQUEST_LEN], uint64_t receipt_expiration_time, uint64_t receipt_level);

MochiFfiError *mochi_server_secret_params_verify_receipt_credential_presentation(const MochiServerSecretParams *server_secret_params, const unsigned char (*presentation)[MochiRECEIPT_CREDENTIAL_PRESENTATION_LEN]);

MochiFfiError *mochi_group_public_params_get_group_identifier(uint8_t (*out)[MochiGROUP_IDENTIFIER_LEN], const unsigned char (*group_public_params)[MochiGROUP_PUBLIC_PARAMS_LEN]);

MochiFfiError *mochi_server_public_params_verify_signature(const MochiServerPublicParams *server_public_params, MochiBorrowedBuffer message, const uint8_t (*notary_signature)[MochiSIGNATURE_LEN]);

MochiFfiError *mochi_auth_credential_presentation_check_valid_contents(MochiBorrowedBuffer presentation_bytes);

MochiFfiError *mochi_auth_credential_presentation_get_uuid_ciphertext(unsigned char (*out)[MochiUUID_CIPHERTEXT_LEN], MochiBorrowedBuffer presentation_bytes);

MochiFfiError *mochi_auth_credential_presentation_get_pni_ciphertext_or_empty(MochiOwnedBuffer *out, MochiBorrowedBuffer presentation_bytes);

MochiFfiError *mochi_auth_credential_presentation_get_redemption_time(uint64_t *out, MochiBorrowedBuffer presentation_bytes);

MochiFfiError *mochi_profile_key_credential_request_context_get_request(unsigned char (*out)[MochiPROFILE_KEY_CREDENTIAL_REQUEST_LEN], const unsigned char (*context)[MochiPROFILE_KEY_CREDENTIAL_REQUEST_CONTEXT_LEN]);

MochiFfiError *mochi_expiring_profile_key_credential_get_expiration_time(uint64_t *out, const unsigned char (*credential)[MochiEXPIRING_PROFILE_KEY_CREDENTIAL_LEN]);

MochiFfiError *mochi_profile_key_credential_presentation_check_valid_contents(MochiBorrowedBuffer presentation_bytes);

MochiFfiError *mochi_profile_key_credential_presentation_get_uuid_ciphertext(unsigned char (*out)[MochiUUID_CIPHERTEXT_LEN], MochiBorrowedBuffer presentation_bytes);

MochiFfiError *mochi_profile_key_credential_presentation_get_profile_key_ciphertext(unsigned char (*out)[MochiPROFILE_KEY_CIPHERTEXT_LEN], MochiBorrowedBuffer presentation_bytes);

MochiFfiError *mochi_receipt_credential_request_context_get_request(unsigned char (*out)[MochiRECEIPT_CREDENTIAL_REQUEST_LEN], const unsigned char (*request_context)[MochiRECEIPT_CREDENTIAL_REQUEST_CONTEXT_LEN]);

MochiFfiError *mochi_receipt_credential_get_receipt_expiration_time(uint64_t *out, const unsigned char (*receipt_credential)[MochiRECEIPT_CREDENTIAL_LEN]);

MochiFfiError *mochi_receipt_credential_get_receipt_level(uint64_t *out, const unsigned char (*receipt_credential)[MochiRECEIPT_CREDENTIAL_LEN]);

MochiFfiError *mochi_receipt_credential_presentation_get_receipt_expiration_time(uint64_t *out, const unsigned char (*presentation)[MochiRECEIPT_CREDENTIAL_PRESENTATION_LEN]);

MochiFfiError *mochi_receipt_credential_presentation_get_receipt_level(uint64_t *out, const unsigned char (*presentation)[MochiRECEIPT_CREDENTIAL_PRESENTATION_LEN]);

MochiFfiError *mochi_receipt_credential_presentation_get_receipt_serial(uint8_t (*out)[MochiRECEIPT_SERIAL_LEN], const unsigned char (*presentation)[MochiRECEIPT_CREDENTIAL_PRESENTATION_LEN]);

MochiFfiError *mochi_generic_server_secret_params_check_valid_contents(MochiBorrowedBuffer params_bytes);

MochiFfiError *mochi_generic_server_secret_params_generate_deterministic(MochiOwnedBuffer *out, const uint8_t (*randomness)[MochiRANDOMNESS_LEN]);

MochiFfiError *mochi_generic_server_secret_params_get_public_params(MochiOwnedBuffer *out, MochiBorrowedBuffer params_bytes);

MochiFfiError *mochi_generic_server_public_params_check_valid_contents(MochiBorrowedBuffer params_bytes);

MochiFfiError *mochi_call_link_secret_params_check_valid_contents(MochiBorrowedBuffer params_bytes);

MochiFfiError *mochi_call_link_secret_params_derive_from_root_key(MochiOwnedBuffer *out, MochiBorrowedBuffer root_key);

MochiFfiError *mochi_call_link_secret_params_get_public_params(MochiOwnedBuffer *out, MochiBorrowedBuffer params_bytes);

MochiFfiError *mochi_call_link_secret_params_decrypt_user_id(MochiServiceIdFixedWidthBinaryBytes *out, MochiBorrowedBuffer params_bytes, const unsigned char (*user_id)[MochiUUID_CIPHERTEXT_LEN]);

MochiFfiError *mochi_call_link_public_params_check_valid_contents(MochiBorrowedBuffer params_bytes);

MochiFfiError *mochi_create_call_link_credential_request_context_check_valid_contents(MochiBorrowedBuffer context_bytes);

MochiFfiError *mochi_create_call_link_credential_request_context_new_deterministic(MochiOwnedBuffer *out, MochiBorrowedBuffer room_id, const uint8_t (*randomness)[MochiRANDOMNESS_LEN]);

MochiFfiError *mochi_create_call_link_credential_request_context_get_request(MochiOwnedBuffer *out, MochiBorrowedBuffer context_bytes);

MochiFfiError *mochi_create_call_link_credential_request_check_valid_contents(MochiBorrowedBuffer request_bytes);

MochiFfiError *mochi_create_call_link_credential_request_issue_deterministic(MochiOwnedBuffer *out, MochiBorrowedBuffer request_bytes, const MochiServiceIdFixedWidthBinaryBytes *user_id, uint64_t timestamp, MochiBorrowedBuffer params_bytes, const uint8_t (*randomness)[MochiRANDOMNESS_LEN]);

MochiFfiError *mochi_create_call_link_credential_response_check_valid_contents(MochiBorrowedBuffer response_bytes);

MochiFfiError *mochi_create_call_link_credential_request_context_receive_response(MochiOwnedBuffer *out, MochiBorrowedBuffer context_bytes, MochiBorrowedBuffer response_bytes, const MochiServiceIdFixedWidthBinaryBytes *user_id, MochiBorrowedBuffer params_bytes);

MochiFfiError *mochi_create_call_link_credential_check_valid_contents(MochiBorrowedBuffer params_bytes);

MochiFfiError *mochi_create_call_link_credential_present_deterministic(MochiOwnedBuffer *out, MochiBorrowedBuffer credential_bytes, MochiBorrowedBuffer room_id, const MochiServiceIdFixedWidthBinaryBytes *user_id, MochiBorrowedBuffer server_params_bytes, MochiBorrowedBuffer call_link_params_bytes, const uint8_t (*randomness)[MochiRANDOMNESS_LEN]);

MochiFfiError *mochi_create_call_link_credential_presentation_check_valid_contents(MochiBorrowedBuffer presentation_bytes);

MochiFfiError *mochi_create_call_link_credential_presentation_verify(MochiBorrowedBuffer presentation_bytes, MochiBorrowedBuffer room_id, uint64_t now, MochiBorrowedBuffer server_params_bytes, MochiBorrowedBuffer call_link_params_bytes);

MochiFfiError *mochi_call_link_auth_credential_response_check_valid_contents(MochiBorrowedBuffer response_bytes);

MochiFfiError *mochi_call_link_auth_credential_response_issue_deterministic(MochiOwnedBuffer *out, const MochiServiceIdFixedWidthBinaryBytes *user_id, uint64_t redemption_time, MochiBorrowedBuffer params_bytes, const uint8_t (*randomness)[MochiRANDOMNESS_LEN]);

MochiFfiError *mochi_call_link_auth_credential_response_receive(MochiOwnedBuffer *out, MochiBorrowedBuffer response_bytes, const MochiServiceIdFixedWidthBinaryBytes *user_id, uint64_t redemption_time, MochiBorrowedBuffer params_bytes);

MochiFfiError *mochi_call_link_auth_credential_check_valid_contents(MochiBorrowedBuffer credential_bytes);

MochiFfiError *mochi_call_link_auth_credential_present_deterministic(MochiOwnedBuffer *out, MochiBorrowedBuffer credential_bytes, const MochiServiceIdFixedWidthBinaryBytes *user_id, uint64_t redemption_time, MochiBorrowedBuffer server_params_bytes, MochiBorrowedBuffer call_link_params_bytes, const uint8_t (*randomness)[MochiRANDOMNESS_LEN]);

MochiFfiError *mochi_call_link_auth_credential_presentation_check_valid_contents(MochiBorrowedBuffer presentation_bytes);

MochiFfiError *mochi_call_link_auth_credential_presentation_verify(MochiBorrowedBuffer presentation_bytes, uint64_t now, MochiBorrowedBuffer server_params_bytes, MochiBorrowedBuffer call_link_params_bytes);

MochiFfiError *mochi_call_link_auth_credential_presentation_get_user_id(unsigned char (*out)[MochiUUID_CIPHERTEXT_LEN], MochiBorrowedBuffer presentation_bytes);

MochiFfiError *mochi_backup_auth_credential_request_context_new(MochiOwnedBuffer *out, const uint8_t (*backup_key)[32], const uint8_t (*uuid)[16]);

MochiFfiError *mochi_backup_auth_credential_request_context_check_valid_contents(MochiBorrowedBuffer context_bytes);

MochiFfiError *mochi_backup_auth_credential_request_context_get_request(MochiOwnedBuffer *out, MochiBorrowedBuffer context_bytes);

MochiFfiError *mochi_backup_auth_credential_request_check_valid_contents(MochiBorrowedBuffer request_bytes);

MochiFfiError *mochi_backup_auth_credential_request_issue_deterministic(MochiOwnedBuffer *out, MochiBorrowedBuffer request_bytes, uint64_t redemption_time, uint8_t backup_level, MochiBorrowedBuffer params_bytes, const uint8_t (*randomness)[MochiRANDOMNESS_LEN]);

MochiFfiError *mochi_backup_auth_credential_response_check_valid_contents(MochiBorrowedBuffer response_bytes);

MochiFfiError *mochi_backup_auth_credential_request_context_receive_response(MochiOwnedBuffer *out, MochiBorrowedBuffer context_bytes, MochiBorrowedBuffer response_bytes, uint64_t expected_redemption_time, MochiBorrowedBuffer params_bytes);

MochiFfiError *mochi_backup_auth_credential_check_valid_contents(MochiBorrowedBuffer params_bytes);

MochiFfiError *mochi_backup_auth_credential_get_backup_id(uint8_t (*out)[16], MochiBorrowedBuffer credential_bytes);

MochiFfiError *mochi_backup_auth_credential_get_backup_level(uint8_t *out, MochiBorrowedBuffer credential_bytes);

MochiFfiError *mochi_backup_auth_credential_present_deterministic(MochiOwnedBuffer *out, MochiBorrowedBuffer credential_bytes, MochiBorrowedBuffer server_params_bytes, const uint8_t (*randomness)[MochiRANDOMNESS_LEN]);

MochiFfiError *mochi_backup_auth_credential_presentation_check_valid_contents(MochiBorrowedBuffer presentation_bytes);

MochiFfiError *mochi_backup_auth_credential_presentation_verify(MochiBorrowedBuffer presentation_bytes, uint64_t now, MochiBorrowedBuffer server_params_bytes);

MochiFfiError *mochi_group_send_derived_key_pair_check_valid_contents(MochiBorrowedBuffer bytes);

MochiFfiError *mochi_group_send_derived_key_pair_for_expiration(MochiOwnedBuffer *out, uint64_t expiration, const MochiServerSecretParams *server_params);

MochiFfiError *mochi_group_send_endorsements_response_check_valid_contents(MochiBorrowedBuffer bytes);

MochiFfiError *mochi_group_send_endorsements_response_issue_deterministic(MochiOwnedBuffer *out, MochiBorrowedBuffer concatenated_group_member_ciphertexts, MochiBorrowedBuffer key_pair, const uint8_t (*randomness)[MochiRANDOMNESS_LEN]);

MochiFfiError *mochi_group_send_endorsements_response_get_expiration(uint64_t *out, MochiBorrowedBuffer response_bytes);

MochiFfiError *mochi_group_send_endorsements_response_receive_and_combine_with_service_ids(MochiBytestringArray *out, MochiBorrowedBuffer response_bytes, MochiBorrowedBuffer group_members, const MochiServiceIdFixedWidthBinaryBytes *local_user, uint64_t now, const unsigned char (*group_params)[MochiGROUP_SECRET_PARAMS_LEN], const MochiServerPublicParams *server_params);

MochiFfiError *mochi_group_send_endorsements_response_receive_and_combine_with_ciphertexts(MochiBytestringArray *out, MochiBorrowedBuffer response_bytes, MochiBorrowedBuffer concatenated_group_member_ciphertexts, MochiBorrowedBuffer local_user_ciphertext, uint64_t now, const MochiServerPublicParams *server_params);

MochiFfiError *mochi_group_send_endorsement_check_valid_contents(MochiBorrowedBuffer bytes);

MochiFfiError *mochi_group_send_endorsement_combine(MochiOwnedBuffer *out, MochiBorrowedSliceOfBuffers endorsements);

MochiFfiError *mochi_group_send_endorsement_remove(MochiOwnedBuffer *out, MochiBorrowedBuffer endorsement, MochiBorrowedBuffer to_remove);

MochiFfiError *mochi_group_send_endorsement_to_token(MochiOwnedBuffer *out, MochiBorrowedBuffer endorsement, const unsigned char (*group_params)[MochiGROUP_SECRET_PARAMS_LEN]);

MochiFfiError *mochi_group_send_token_check_valid_contents(MochiBorrowedBuffer bytes);

MochiFfiError *mochi_group_send_token_to_full_token(MochiOwnedBuffer *out, MochiBorrowedBuffer token, uint64_t expiration);

MochiFfiError *mochi_group_send_full_token_check_valid_contents(MochiBorrowedBuffer bytes);

MochiFfiError *mochi_group_send_full_token_get_expiration(uint64_t *out, MochiBorrowedBuffer token);

MochiFfiError *mochi_group_send_full_token_verify(MochiBorrowedBuffer token, MochiBorrowedBuffer user_ids, uint64_t now, MochiBorrowedBuffer key_pair);

MochiFfiError *mochi_verify_signature(bool *out, MochiBorrowedBuffer cert_pem, MochiBorrowedBuffer body, MochiBorrowedBuffer signature, uint64_t current_timestamp);

MochiFfiError *mochi_connection_manager_destroy(MochiConnectionManager *p);

MochiFfiError *mochi_connection_manager_new(MochiConnectionManager **out, uint8_t environment, const char *user_agent);

MochiFfiError *mochi_connection_manager_set_proxy(const MochiConnectionManager *connection_manager, const char *host, int32_t port);

MochiFfiError *mochi_connection_manager_clear_proxy(const MochiConnectionManager *connection_manager);

MochiFfiError *mochi_create_otp(const char **out, const char *username, MochiBorrowedBuffer secret);

MochiFfiError *mochi_create_otp_from_base64(const char **out, const char *username, const char *secret);

MochiFfiError *mochi_svr3_backup(MochiCPromiseOwnedBufferOfc_uchar *promise, const MochiTokioAsyncContext *async_runtime, const MochiConnectionManager *connection_manager, MochiBorrowedBuffer secret, const char *password, uint32_t max_tries, const char *username, const char *enclave_password);

MochiFfiError *mochi_svr3_restore(MochiCPromiseOwnedBufferOfc_uchar *promise, const MochiTokioAsyncContext *async_runtime, const MochiConnectionManager *connection_manager, const char *password, MochiBorrowedBuffer share_set, const char *username, const char *enclave_password);

MochiFfiError *mochi_svr3_remove(MochiCPromisebool *promise, const MochiTokioAsyncContext *async_runtime, const MochiConnectionManager *connection_manager, const char *username, const char *enclave_password);

MochiFfiError *mochi_lookup_request_destroy(MochiLookupRequest *p);

MochiFfiError *mochi_lookup_request_new(MochiLookupRequest **out);

MochiFfiError *mochi_lookup_request_add_e164(const MochiLookupRequest *request, const char *e164);

MochiFfiError *mochi_lookup_request_add_previous_e164(const MochiLookupRequest *request, const char *e164);

MochiFfiError *mochi_lookup_request_set_token(const MochiLookupRequest *request, MochiBorrowedBuffer token);

MochiFfiError *mochi_lookup_request_add_aci_and_access_key(const MochiLookupRequest *request, const MochiServiceIdFixedWidthBinaryBytes *aci, MochiBorrowedBuffer access_key);

MochiFfiError *mochi_lookup_request_set_return_acis_without_uaks(const MochiLookupRequest *request, bool return_acis_without_uaks);

MochiFfiError *mochi_cdsi_lookup_destroy(MochiCdsiLookup *p);

MochiFfiError *mochi_cdsi_lookup_new(MochiCPromiseCdsiLookup *promise, const MochiTokioAsyncContext *async_runtime, const MochiConnectionManager *connection_manager, const char *username, const char *password, const MochiLookupRequest *request);

MochiFfiError *mochi_cdsi_lookup_token(MochiOwnedBuffer *out, const MochiCdsiLookup *lookup);

MochiFfiError *mochi_cdsi_lookup_complete(MochiCPromiseFfiCdsiLookupResponse *promise, const MochiTokioAsyncContext *async_runtime, const MochiCdsiLookup *lookup);

MochiFfiError *mochi_chat_destroy(MochiChat *p);

MochiFfiError *mochi_http_request_destroy(MochiHttpRequest *p);

MochiFfiError *mochi_http_request_new_with_body(MochiHttpRequest **out, const char *method, const char *path, MochiBorrowedBuffer body_as_slice);

MochiFfiError *mochi_http_request_new_without_body(MochiHttpRequest **out, const char *method, const char *path);

MochiFfiError *mochi_http_request_add_header(const MochiHttpRequest *request, const char *name, const char *value);

MochiFfiError *mochi_chat_service_new(MochiChat **out, const MochiConnectionManager *connection_manager, const char *username, const char *password);

MochiFfiError *mochi_chat_service_disconnect(MochiCPromisebool *promise, const MochiTokioAsyncContext *async_runtime, const MochiChat *chat);

MochiFfiError *mochi_chat_service_connect_unauth(MochiCPromiseFfiChatServiceDebugInfo *promise, const MochiTokioAsyncContext *async_runtime, const MochiChat *chat);

MochiFfiError *mochi_chat_service_connect_auth(MochiCPromiseFfiChatServiceDebugInfo *promise, const MochiTokioAsyncContext *async_runtime, const MochiChat *chat);

MochiFfiError *mochi_chat_service_unauth_send(MochiCPromiseFfiChatResponse *promise, const MochiTokioAsyncContext *async_runtime, const MochiChat *chat, const MochiHttpRequest *http_request, uint32_t timeout_millis);

MochiFfiError *mochi_chat_service_unauth_send_and_debug(MochiCPromiseFfiResponseAndDebugInfo *promise, const MochiTokioAsyncContext *async_runtime, const MochiChat *chat, const MochiHttpRequest *http_request, uint32_t timeout_millis);

MochiFfiError *mochi_chat_service_auth_send(MochiCPromiseFfiChatResponse *promise, const MochiTokioAsyncContext *async_runtime, const MochiChat *chat, const MochiHttpRequest *http_request, uint32_t timeout_millis);

MochiFfiError *mochi_chat_service_auth_send_and_debug(MochiCPromiseFfiResponseAndDebugInfo *promise, const MochiTokioAsyncContext *async_runtime, const MochiChat *chat, const MochiHttpRequest *http_request, uint32_t timeout_millis);

MochiFfiError *mochi_chat_server_set_listener(const MochiTokioAsyncContext *runtime, const MochiChat *chat, const MochiFfiMakeChatListenerStruct *make_listener);

MochiFfiError *mochi_testing_chat_service_inject_raw_server_request(const MochiChat *chat, MochiBorrowedBuffer bytes);

MochiFfiError *mochi_testing_chat_service_inject_connection_interrupted(const MochiChat *chat);

MochiFfiError *mochi_server_message_ack_destroy(MochiServerMessageAck *p);

MochiFfiError *mochi_server_message_ack_send(MochiCPromisebool *promise, const MochiTokioAsyncContext *async_runtime, const MochiServerMessageAck *ack);

MochiFfiError *mochi_tokio_async_context_destroy(MochiTokioAsyncContext *p);

MochiFfiError *mochi_tokio_async_context_new(MochiTokioAsyncContext **out);

MochiFfiError *mochi_tokio_async_context_cancel(const MochiTokioAsyncContext *context, uint64_t raw_cancellation_id);

MochiFfiError *mochi_pin_hash_destroy(MochiPinHash *p);

MochiFfiError *mochi_pin_hash_clone(MochiPinHash **new_obj, const MochiPinHash *obj);

MochiFfiError *mochi_pin_hash_encryption_key(uint8_t (*out)[32], const MochiPinHash *ph);

MochiFfiError *mochi_pin_hash_access_key(uint8_t (*out)[32], const MochiPinHash *ph);

MochiFfiError *mochi_pin_hash_from_salt(MochiPinHash **out, MochiBorrowedBuffer pin, const uint8_t (*salt)[32]);

MochiFfiError *mochi_pin_hash_from_username_mrenclave(MochiPinHash **out, MochiBorrowedBuffer pin, const char *username, MochiBorrowedBuffer mrenclave);

MochiFfiError *mochi_pin_local_hash(const char **out, MochiBorrowedBuffer pin);

MochiFfiError *mochi_pin_verify_local_hash(bool *out, const char *encoded_hash, MochiBorrowedBuffer pin);

MochiFfiError *mochi_svr2_client_new(MochiSgxClientState **out, MochiBorrowedBuffer mrenclave, MochiBorrowedBuffer attestation_msg, uint64_t current_timestamp);

MochiFfiError *mochi_incremental_mac_destroy(MochiIncrementalMac *p);

MochiFfiError *mochi_incremental_mac_calculate_chunk_size(uint32_t *out, uint32_t data_size);

MochiFfiError *mochi_incremental_mac_initialize(MochiIncrementalMac **out, MochiBorrowedBuffer key, uint32_t chunk_size);

MochiFfiError *mochi_incremental_mac_update(MochiOwnedBuffer *out, MochiIncrementalMac *mac, MochiBorrowedBuffer bytes, uint32_t offset, uint32_t length);

MochiFfiError *mochi_incremental_mac_finalize(MochiOwnedBuffer *out, MochiIncrementalMac *mac);

MochiFfiError *mochi_validating_mac_destroy(MochiValidatingMac *p);

MochiFfiError *mochi_validating_mac_initialize(MochiValidatingMac **out, MochiBorrowedBuffer key, uint32_t chunk_size, MochiBorrowedBuffer digests);

MochiFfiError *mochi_validating_mac_update(int32_t *out, MochiValidatingMac *mac, MochiBorrowedBuffer bytes, uint32_t offset, uint32_t length);

MochiFfiError *mochi_validating_mac_finalize(int32_t *out, MochiValidatingMac *mac);

MochiFfiError *mochi_message_backup_key_destroy(MochiMessageBackupKey *p);

MochiFfiError *mochi_message_backup_validation_outcome_destroy(MochiMessageBackupValidationOutcome *p);

MochiFfiError *mochi_message_backup_key_new(MochiMessageBackupKey **out, const uint8_t (*master_key)[32], const MochiServiceIdFixedWidthBinaryBytes *aci);

MochiFfiError *mochi_message_backup_validation_outcome_get_error_message(const char **out, const MochiMessageBackupValidationOutcome *outcome);

MochiFfiError *mochi_message_backup_validation_outcome_get_unknown_fields(MochiStringArray *out, const MochiMessageBackupValidationOutcome *outcome);

MochiFfiError *mochi_message_backup_validator_validate(MochiMessageBackupValidationOutcome **out, const MochiMessageBackupKey *key, const MochiInputStream *first_stream, const MochiInputStream *second_stream, uint64_t len, uint8_t purpose);

MochiFfiError *mochi_username_hash(uint8_t (*out)[32], const char *username);

MochiFfiError *mochi_username_proof(MochiOwnedBuffer *out, const char *username, MochiBorrowedBuffer randomness);

MochiFfiError *mochi_username_verify(MochiBorrowedBuffer proof, MochiBorrowedBuffer hash);

MochiFfiError *mochi_username_candidates_from(MochiStringArray *out, const char *nickname, uint32_t min_len, uint32_t max_len);

MochiFfiError *mochi_username_hash_from_parts(uint8_t (*out)[32], const char *nickname, const char *discriminator, uint32_t min_len, uint32_t max_len);

MochiFfiError *mochi_username_link_create(MochiOwnedBuffer *out, const char *username, MochiBorrowedBuffer entropy);

MochiFfiError *mochi_username_link_decrypt_username(const char **out, MochiBorrowedBuffer entropy, MochiBorrowedBuffer encrypted_username);

#if defined(MOCHI_MEDIA_SUPPORTED)
MochiFfiError *mochi_sanitized_metadata_destroy(MochiSanitizedMetadata *p);
#endif

#if defined(MOCHI_MEDIA_SUPPORTED)
MochiFfiError *mochi_sanitized_metadata_clone(MochiSanitizedMetadata **new_obj, const MochiSanitizedMetadata *obj);
#endif

#if defined(MOCHI_MEDIA_SUPPORTED)
MochiFfiError *mochi_mochi_media_check_available(void);
#endif

#if defined(MOCHI_MEDIA_SUPPORTED)
MochiFfiError *mochi_mp4_sanitizer_sanitize(MochiSanitizedMetadata **out, const MochiInputStream *input, uint64_t len);
#endif

#if defined(MOCHI_MEDIA_SUPPORTED)
MochiFfiError *mochi_webp_sanitizer_sanitize(const MochiSyncInputStream *input);
#endif

#if defined(MOCHI_MEDIA_SUPPORTED)
MochiFfiError *mochi_sanitized_metadata_get_metadata(MochiOwnedBuffer *out, const MochiSanitizedMetadata *sanitized);
#endif

#if defined(MOCHI_MEDIA_SUPPORTED)
MochiFfiError *mochi_sanitized_metadata_get_data_offset(uint64_t *out, const MochiSanitizedMetadata *sanitized);
#endif

#if defined(MOCHI_MEDIA_SUPPORTED)
MochiFfiError *mochi_sanitized_metadata_get_data_len(uint64_t *out, const MochiSanitizedMetadata *sanitized);
#endif

MochiFfiError *mochi_testing_NonSuspendingBackgroundThreadRuntime_destroy(MochiNonSuspendingBackgroundThreadRuntime *p);

MochiFfiError *mochi_testing_future_success(MochiCPromisei32 *promise, const MochiNonSuspendingBackgroundThreadRuntime *async_runtime, uint8_t input);

MochiFfiError *mochi_testing_future_failure(MochiCPromisei32 *promise, const MochiNonSuspendingBackgroundThreadRuntime *async_runtime, uint8_t _input);

MochiFfiError *mochi_testing_handle_type_destroy(MochiTestingHandleType *p);

MochiFfiError *mochi_testing_handle_type_clone(MochiTestingHandleType **new_obj, const MochiTestingHandleType *obj);

MochiFfiError *mochi_testing_testing_handle_type_get_value(uint8_t *out, const MochiTestingHandleType *handle);

MochiFfiError *mochi_testing_future_produces_pointer_type(MochiCPromiseTestingHandleType *promise, const MochiNonSuspendingBackgroundThreadRuntime *async_runtime, uint8_t input);

MochiFfiError *mochi_other_testing_handle_type_destroy(MochiOtherTestingHandleType *p);

MochiFfiError *mochi_other_testing_handle_type_clone(MochiOtherTestingHandleType **new_obj, const MochiOtherTestingHandleType *obj);

MochiFfiError *mochi_testing_other_testing_handle_type_get_value(const char **out, const MochiOtherTestingHandleType *handle);

MochiFfiError *mochi_testing_future_produces_other_pointer_type(MochiCPromiseOtherTestingHandleType *promise, const MochiNonSuspendingBackgroundThreadRuntime *async_runtime, const char *input);

MochiFfiError *mochi_testing_panic_on_borrow_sync(const void *_input);

MochiFfiError *mochi_testing_panic_on_borrow_async(const void *_input);

MochiFfiError *mochi_testing_panic_on_borrow_io(MochiCPromisebool *promise, const MochiNonSuspendingBackgroundThreadRuntime *async_runtime, const void *_input);

MochiFfiError *mochi_testing_error_on_borrow_sync(const void *_input);

MochiFfiError *mochi_testing_error_on_borrow_async(const void *_input);

MochiFfiError *mochi_testing_error_on_borrow_io(MochiCPromisebool *promise, const MochiNonSuspendingBackgroundThreadRuntime *async_runtime, const void *_input);

MochiFfiError *mochi_testing_panic_on_load_sync(const void *_needs_cleanup, const void *_input);

MochiFfiError *mochi_testing_panic_on_load_async(const void *_needs_cleanup, const void *_input);

MochiFfiError *mochi_testing_panic_on_load_io(MochiCPromisebool *promise, const MochiNonSuspendingBackgroundThreadRuntime *async_runtime, const void *_needs_cleanup, const void *_input);

MochiFfiError *mochi_testing_panic_in_body_sync(const void *_input);

MochiFfiError *mochi_testing_panic_in_body_async(const void *_input);

MochiFfiError *mochi_testing_panic_in_body_io(MochiCPromisebool *promise, const MochiNonSuspendingBackgroundThreadRuntime *async_runtime, const void *_input);

MochiFfiError *mochi_testing_panic_on_return_sync(const void **out, const void *_needs_cleanup);

MochiFfiError *mochi_testing_panic_on_return_async(const void **out, const void *_needs_cleanup);

MochiFfiError *mochi_testing_panic_on_return_io(MochiCPromiseRawPointer *promise, const MochiNonSuspendingBackgroundThreadRuntime *async_runtime, const void *_needs_cleanup);

MochiFfiError *mochi_testing_error_on_return_sync(const void **out, const void *_needs_cleanup);

MochiFfiError *mochi_testing_error_on_return_async(const void **out, const void *_needs_cleanup);

MochiFfiError *mochi_testing_error_on_return_io(MochiCPromiseRawPointer *promise, const MochiNonSuspendingBackgroundThreadRuntime *async_runtime, const void *_needs_cleanup);

MochiFfiError *mochi_testing_return_string_array(MochiStringArray *out);

MochiFfiError *mochi_testing_process_bytestring_array(MochiBytestringArray *out, MochiBorrowedSliceOfBuffers input);

MochiFfiError *mochi_testing_cdsi_lookup_response_convert(MochiCPromiseFfiCdsiLookupResponse *promise, const MochiTokioAsyncContext *async_runtime);

MochiFfiError *mochi_testing_only_completes_by_cancellation(MochiCPromisebool *promise, const MochiTokioAsyncContext *async_runtime);

MochiFfiError *mochi_testing_cdsi_lookup_error_convert(const char *error_description);

MochiFfiError *mochi_testing_chat_service_error_convert(const char *error_description);

MochiFfiError *mochi_testing_chat_service_response_convert(MochiFfiChatResponse *out, bool body_present);

MochiFfiError *mochi_testing_chat_service_debug_info_convert(MochiFfiChatServiceDebugInfo *out);

MochiFfiError *mochi_testing_chat_service_response_and_debug_info_convert(MochiFfiResponseAndDebugInfo *out);

MochiFfiError *mochi_testing_chat_request_get_method(const char **out, const MochiHttpRequest *request);

MochiFfiError *mochi_testing_chat_request_get_path(const char **out, const MochiHttpRequest *request);

MochiFfiError *mochi_testing_chat_request_get_header_value(const char **out, const MochiHttpRequest *request, const char *header_name);

MochiFfiError *mochi_testing_chat_request_get_body(MochiOwnedBuffer *out, const MochiHttpRequest *request);

#endif /* MOCHI_FFI_H_ */
